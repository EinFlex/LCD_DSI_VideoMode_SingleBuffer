
LCD_DSI_VideoMode_SingleBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d10  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00099dc4  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0809cc88  0809cc88  000acc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0809cc90  0809cc90  000acc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0809cc94  0809cc94  000acc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  20000000  0809cc98  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000b0064  2**0
                  CONTENTS
  8 .bss          0000034c  20000064  20000064  000b0064  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003b0  200003b0  000b0064  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000b0064  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015771  00000000  00000000  000b0094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000337d  00000000  00000000  000c5805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000c391  00000000  00000000  000c8b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000d4f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  000d5c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c19f  00000000  00000000  000d6e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b4e  00000000  00000000  00102fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff40  00000000  00000000  00118b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218a5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  00218ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000064 	.word	0x20000064
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08002eac 	.word	0x08002eac

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000068 	.word	0x20000068
 80001f0:	08002eac 	.word	0x08002eac

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	4604      	mov	r4, r0
 80004fc:	b0b1      	sub	sp, #196	; 0xc4
  NT35510_IO_Delay(120);
 80004fe:	2078      	movs	r0, #120	; 0x78
{
 8000500:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 8000502:	f000 f979 	bl	80007f8 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8000506:	4ba3      	ldr	r3, [pc, #652]	; (8000794 <NT35510_Init+0x29c>)
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8000508:	4aa3      	ldr	r2, [pc, #652]	; (8000798 <NT35510_Init+0x2a0>)
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	889b      	ldrh	r3, [r3, #4]
 800050e:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8000512:	4ba2      	ldr	r3, [pc, #648]	; (800079c <NT35510_Init+0x2a4>)
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000514:	49a2      	ldr	r1, [pc, #648]	; (80007a0 <NT35510_Init+0x2a8>)
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8000516:	902c      	str	r0, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8000518:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 800051c:	4ba1      	ldr	r3, [pc, #644]	; (80007a4 <NT35510_Init+0x2ac>)
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800051e:	48a2      	ldr	r0, [pc, #648]	; (80007a8 <NT35510_Init+0x2b0>)
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8000520:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 80007c8 <NT35510_Init+0x2d0>
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000524:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 80007cc <NT35510_Init+0x2d4>
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000528:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800052c:	4b9f      	ldr	r3, [pc, #636]	; (80007ac <NT35510_Init+0x2b4>)
 800052e:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8000532:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000536:	f8ad 3004 	strh.w	r3, [sp, #4]
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800053a:	4b9d      	ldr	r3, [pc, #628]	; (80007b0 <NT35510_Init+0x2b8>)
 800053c:	e9cd c31a 	strd	ip, r3, [sp, #104]	; 0x68
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000540:	4b9c      	ldr	r3, [pc, #624]	; (80007b4 <NT35510_Init+0x2bc>)
 8000542:	e9cd e31c 	strd	lr, r3, [sp, #112]	; 0x70
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000546:	4b9c      	ldr	r3, [pc, #624]	; (80007b8 <NT35510_Init+0x2c0>)
 8000548:	931e      	str	r3, [sp, #120]	; 0x78
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800054a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800054e:	931f      	str	r3, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000550:	4b9a      	ldr	r3, [pc, #616]	; (80007bc <NT35510_Init+0x2c4>)
 8000552:	789a      	ldrb	r2, [r3, #2]
 8000554:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000558:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 800055c:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000560:	7ada      	ldrb	r2, [r3, #11]
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000562:	8819      	ldrh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000564:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000568:	f240 32b6 	movw	r2, #950	; 0x3b6
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800056c:	f8d3 0003 	ldr.w	r0, [r3, #3]
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000570:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000574:	f8ad 2008 	strh.w	r2, [sp, #8]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000578:	f8b3 1009 	ldrh.w	r1, [r3, #9]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800057c:	902e      	str	r0, [sp, #184]	; 0xb8
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 800057e:	f245 12b5 	movw	r2, #20917	; 0x51b5
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000582:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000586:	f8ad 200c 	strh.w	r2, [sp, #12]
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 800058a:	8999      	ldrh	r1, [r3, #12]
 800058c:	7b9a      	ldrb	r2, [r3, #14]
 800058e:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000592:	4a8b      	ldr	r2, [pc, #556]	; (80007c0 <NT35510_Init+0x2c8>)
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000594:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000598:	6810      	ldr	r0, [r2, #0]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80005a0:	4a88      	ldr	r2, [pc, #544]	; (80007c4 <NT35510_Init+0x2cc>)
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80005a2:	9022      	str	r0, [sp, #136]	; 0x88
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80005a4:	f04f 413c 	mov.w	r1, #3154116608	; 0xbc000000
 80005a8:	e9cd 1220 	strd	r1, r2, [sp, #128]	; 0x80
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80005ac:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 80005b0:	f8ad 2010 	strh.w	r2, [sp, #16]
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80005b4:	2236      	movs	r2, #54	; 0x36
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80005b6:	f8d3 000f 	ldr.w	r0, [r3, #15]
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80005ba:	f8ad 2014 	strh.w	r2, [sp, #20]
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80005be:	7cda      	ldrb	r2, [r3, #19]
 80005c0:	9024      	str	r0, [sp, #144]	; 0x90
 80005c2:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80005c6:	6958      	ldr	r0, [r3, #20]
 80005c8:	7e1a      	ldrb	r2, [r3, #24]
 80005ca:	9026      	str	r0, [sp, #152]	; 0x98
 80005cc:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80005d0:	f8d3 0019 	ldr.w	r0, [r3, #25]
 80005d4:	9028      	str	r0, [sp, #160]	; 0xa0
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80005d6:	f246 0236 	movw	r2, #24630	; 0x6036
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80005da:	f8d3 001e 	ldr.w	r0, [r3, #30]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80005de:	f8ad 2018 	strh.w	r2, [sp, #24]
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80005e2:	7f5a      	ldrb	r2, [r3, #29]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80005e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80005e8:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80005ec:	2335      	movs	r3, #53	; 0x35
 80005ee:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80005f2:	2311      	movs	r3, #17
 80005f4:	f8ad 3020 	strh.w	r3, [sp, #32]
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80005f8:	2329      	movs	r3, #41	; 0x29
 80005fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80005fe:	f647 7351 	movw	r3, #32593	; 0x7f51
 8000602:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000606:	f642 4353 	movw	r3, #11347	; 0x2c53
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 800060a:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 800060e:	902a      	str	r0, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000610:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8000614:	f240 2355 	movw	r3, #597	; 0x255
 8000618:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 800061c:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000620:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000624:	232c      	movs	r3, #44	; 0x2c
 8000626:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800062a:	f245 533a 	movw	r3, #21818	; 0x553a
 800062e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8000632:	a92c      	add	r1, sp, #176	; 0xb0
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000634:	f247 733a 	movw	r3, #30522	; 0x773a
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8000638:	2005      	movs	r0, #5
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 800063a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800063e:	f000 f9f1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000642:	a914      	add	r1, sp, #80	; 0x50
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f9ed 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800064a:	a915      	add	r1, sp, #84	; 0x54
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f9e9 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000652:	a916      	add	r1, sp, #88	; 0x58
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f9e5 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800065a:	a917      	add	r1, sp, #92	; 0x5c
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f9e1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000662:	a918      	add	r1, sp, #96	; 0x60
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f9dd 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800066a:	a919      	add	r1, sp, #100	; 0x64
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f9d9 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000672:	a901      	add	r1, sp, #4
 8000674:	2001      	movs	r0, #1
 8000676:	f000 f9d5 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800067a:	a91a      	add	r1, sp, #104	; 0x68
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f9d1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000682:	a91b      	add	r1, sp, #108	; 0x6c
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f9cd 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800068a:	a91c      	add	r1, sp, #112	; 0x70
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f9c9 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000692:	a91d      	add	r1, sp, #116	; 0x74
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f9c5 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800069a:	a91e      	add	r1, sp, #120	; 0x78
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f9c1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80006a2:	a91f      	add	r1, sp, #124	; 0x7c
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f9bd 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80006aa:	a911      	add	r1, sp, #68	; 0x44
 80006ac:	2002      	movs	r0, #2
 80006ae:	f000 f9b9 	bl	8000a24 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80006b2:	a92e      	add	r1, sp, #184	; 0xb8
 80006b4:	2005      	movs	r0, #5
 80006b6:	f000 f9b5 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80006ba:	a912      	add	r1, sp, #72	; 0x48
 80006bc:	2002      	movs	r0, #2
 80006be:	f000 f9b1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80006c2:	a902      	add	r1, sp, #8
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 f9ad 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80006ca:	a903      	add	r1, sp, #12
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f9a9 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80006d2:	a913      	add	r1, sp, #76	; 0x4c
 80006d4:	2002      	movs	r0, #2
 80006d6:	f000 f9a5 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80006da:	a922      	add	r1, sp, #136	; 0x88
 80006dc:	2004      	movs	r0, #4
 80006de:	f000 f9a1 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80006e2:	a920      	add	r1, sp, #128	; 0x80
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f99d 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80006ea:	a921      	add	r1, sp, #132	; 0x84
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f999 	bl	8000a24 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80006f2:	a904      	add	r1, sp, #16
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 f995 	bl	8000a24 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80006fa:	a907      	add	r1, sp, #28
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 f991 	bl	8000a24 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8000702:	2000      	movs	r0, #0
 8000704:	a910      	add	r1, sp, #64	; 0x40
 8000706:	f000 f98d 	bl	8000a24 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 800070a:	20c8      	movs	r0, #200	; 0xc8
 800070c:	f000 f874 	bl	80007f8 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000710:	2d00      	cmp	r5, #0
 8000712:	d134      	bne.n	800077e <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8000714:	a905      	add	r1, sp, #20
 8000716:	2001      	movs	r0, #1
 8000718:	f000 f984 	bl	8000a24 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800071c:	a924      	add	r1, sp, #144	; 0x90
 800071e:	2004      	movs	r0, #4
 8000720:	f000 f980 	bl	8000a24 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000724:	a926      	add	r1, sp, #152	; 0x98
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000726:	2004      	movs	r0, #4
 8000728:	f000 f97c 	bl	8000a24 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 800072c:	a908      	add	r1, sp, #32
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f978 	bl	8000a24 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f000 f85f 	bl	80007f8 <NT35510_IO_Delay>

  switch(ColorCoding)
 800073a:	2c02      	cmp	r4, #2
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800073c:	bf0c      	ite	eq
 800073e:	a90f      	addeq	r1, sp, #60	; 0x3c
      break;
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000740:	a910      	addne	r1, sp, #64	; 0x40
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f96e 	bl	8000a24 <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8000748:	a90a      	add	r1, sp, #40	; 0x28
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f96a 	bl	8000a24 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000750:	a90b      	add	r1, sp, #44	; 0x2c
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f966 	bl	8000a24 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8000758:	a90c      	add	r1, sp, #48	; 0x30
 800075a:	2001      	movs	r0, #1
 800075c:	f000 f962 	bl	8000a24 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000760:	a90d      	add	r1, sp, #52	; 0x34
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f95e 	bl	8000a24 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8000768:	a909      	add	r1, sp, #36	; 0x24
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f95a 	bl	8000a24 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000770:	a90e      	add	r1, sp, #56	; 0x38
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f956 	bl	8000a24 <DSI_IO_WriteCmd>

  return 0;
}
 8000778:	2000      	movs	r0, #0
 800077a:	b031      	add	sp, #196	; 0xc4
 800077c:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 800077e:	a906      	add	r1, sp, #24
 8000780:	2001      	movs	r0, #1
 8000782:	f000 f94f 	bl	8000a24 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8000786:	a928      	add	r1, sp, #160	; 0xa0
 8000788:	2004      	movs	r0, #4
 800078a:	f000 f94b 	bl	8000a24 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 800078e:	a92a      	add	r1, sp, #168	; 0xa8
 8000790:	e7c9      	b.n	8000726 <NT35510_Init+0x22e>
 8000792:	bf00      	nop
 8000794:	0809cbec 	.word	0x0809cbec
 8000798:	b0030303 	.word	0xb0030303
 800079c:	b6464646 	.word	0xb6464646
 80007a0:	b1030303 	.word	0xb1030303
 80007a4:	b7363636 	.word	0xb7363636
 80007a8:	b2020000 	.word	0xb2020000
 80007ac:	b8262626 	.word	0xb8262626
 80007b0:	b9363636 	.word	0xb9363636
 80007b4:	ba262626 	.word	0xba262626
 80007b8:	bc008000 	.word	0xbc008000
 80007bc:	08002ec4 	.word	0x08002ec4
 80007c0:	0809cbf3 	.word	0x0809cbf3
 80007c4:	cc000003 	.word	0xcc000003
 80007c8:	b3090909 	.word	0xb3090909
 80007cc:	b5080808 	.word	0xb5080808

080007d0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  if (Led <= LED4)
 80007d0:	2803      	cmp	r0, #3
{
 80007d2:	b410      	push	{r4}
  if (Led <= LED4)
 80007d4:	d80a      	bhi.n	80007ec <BSP_LED_On+0x1c>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <BSP_LED_On+0x24>)
 80007d8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80007dc:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 80007e0:	6920      	ldr	r0, [r4, #16]
  }

}
 80007e2:	f85d 4b04 	ldr.w	r4, [sp], #4
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f001 bb72 	b.w	8001ed0 <HAL_GPIO_WritePin>
}
 80007ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000

080007f8 <NT35510_IO_Delay>:
 80007f8:	f000 bd0c 	b.w	8001214 <HAL_Delay>

080007fc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80007fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8000800:	4c15      	ldr	r4, [pc, #84]	; (8000858 <LL_FillBuffer+0x5c>)
{
 8000802:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8000806:	4616      	mov	r6, r2
 8000808:	461f      	mov	r7, r3
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 800080a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800080e:	2300      	movs	r3, #0
 8000810:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8000814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000816:	60e3      	str	r3, [r4, #12]
{
 8000818:	4680      	mov	r8, r0

  hdma2d_eval.Instance = DMA2D;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <LL_FillBuffer+0x60>)
 800081c:	6023      	str	r3, [r4, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 800081e:	4620      	mov	r0, r4
{
 8000820:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000822:	f000 fe74 	bl	800150e <HAL_DMA2D_Init>
 8000826:	b998      	cbnz	r0, 8000850 <LL_FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8000828:	4641      	mov	r1, r8
 800082a:	4620      	mov	r0, r4
 800082c:	f000 ff36 	bl	800169c <HAL_DMA2D_ConfigLayer>
 8000830:	b970      	cbnz	r0, 8000850 <LL_FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000832:	9700      	str	r7, [sp, #0]
 8000834:	4633      	mov	r3, r6
 8000836:	462a      	mov	r2, r5
 8000838:	4649      	mov	r1, r9
 800083a:	4620      	mov	r0, r4
 800083c:	f000 fe93 	bl	8001566 <HAL_DMA2D_Start>
 8000840:	b930      	cbnz	r0, 8000850 <LL_FillBuffer+0x54>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000842:	210a      	movs	r1, #10
 8000844:	4620      	mov	r0, r4
      }
    }
  }
}
 8000846:	b003      	add	sp, #12
 8000848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 800084c:	f000 bea5 	b.w	800159a <HAL_DMA2D_PollForTransfer>
}
 8000850:	b003      	add	sp, #12
 8000852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000856:	bf00      	nop
 8000858:	20000080 	.word	0x20000080
 800085c:	4002b000 	.word	0x4002b000

08000860 <BSP_LCD_Reset>:
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	b087      	sub	sp, #28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000864:	2600      	movs	r6, #0
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <BSP_LCD_Reset+0x58>)
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800086c:	4c13      	ldr	r4, [pc, #76]	; (80008bc <BSP_LCD_Reset+0x5c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000876:	9603      	str	r6, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087c:	9300      	str	r3, [sp, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800087e:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000880:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000882:	2701      	movs	r7, #1
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000884:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000886:	a901      	add	r1, sp, #4
 8000888:	4620      	mov	r0, r4
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800088a:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800088c:	e9cd 5701 	strd	r5, r7, [sp, #4]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000890:	f001 fa38 	bl	8001d04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000894:	4632      	mov	r2, r6
 8000896:	4629      	mov	r1, r5
 8000898:	4620      	mov	r0, r4
 800089a:	f001 fb19 	bl	8001ed0 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 800089e:	2014      	movs	r0, #20
 80008a0:	f000 fcb8 	bl	8001214 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 80008a4:	463a      	mov	r2, r7
 80008a6:	4629      	mov	r1, r5
 80008a8:	4620      	mov	r0, r4
 80008aa:	f001 fb11 	bl	8001ed0 <HAL_GPIO_WritePin>
    HAL_Delay(20);    
 80008ae:	2014      	movs	r0, #20
 80008b0:	f000 fcb0 	bl	8001214 <HAL_Delay>
}
 80008b4:	b007      	add	sp, #28
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021c00 	.word	0x40021c00

080008c0 <BSP_LCD_LayerDefaultInit>:
{
 80008c0:	b570      	push	{r4, r5, r6, lr}
  return (lcd_x_size);
 80008c2:	4d18      	ldr	r5, [pc, #96]	; (8000924 <BSP_LCD_LayerDefaultInit+0x64>)
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80008c4:	4c18      	ldr	r4, [pc, #96]	; (8000928 <BSP_LCD_LayerDefaultInit+0x68>)
  return (lcd_y_size);
 80008c6:	686a      	ldr	r2, [r5, #4]
{
 80008c8:	b08e      	sub	sp, #56	; 0x38
 80008ca:	4606      	mov	r6, r0
  return (lcd_x_size);
 80008cc:	6828      	ldr	r0, [r5, #0]
  Layercfg.FBStartAdress = FB_Address;
 80008ce:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.WindowX0 = 0;
 80008d0:	2300      	movs	r3, #0
  Layercfg.Alpha = 255;
 80008d2:	21ff      	movs	r1, #255	; 0xff
  Layercfg.WindowY0 = 0;
 80008d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  Layercfg.Alpha0 = 0;
 80008dc:	e9cd 1306 	strd	r1, r3, [sp, #24]
  Layercfg.WindowX0 = 0;
 80008e0:	9301      	str	r3, [sp, #4]
  Layercfg.Backcolor.Blue = 0;
 80008e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 80008e6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80008ee:	2307      	movs	r3, #7
 80008f0:	e9cd 1308 	strd	r1, r3, [sp, #32]
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80008f4:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80008f8:	a901      	add	r1, sp, #4
 80008fa:	4632      	mov	r2, r6
 80008fc:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8000900:	f001 fc3e 	bl	8002180 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000904:	200c      	movs	r0, #12
 8000906:	fb00 4006 	mla	r0, r0, r6, r4
 800090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090e:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8000912:	3508      	adds	r5, #8
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000914:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
  DrawProp[LayerIndex].pFont     = &Font24;
 8000918:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800091c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 8000920:	b00e      	add	sp, #56	; 0x38
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	20000024 	.word	0x20000024
 8000928:	20000080 	.word	0x20000080

0800092c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <BSP_LCD_SelectLayer+0x8>)
 800092e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
}
 8000932:	4770      	bx	lr
 8000934:	20000080 	.word	0x20000080

08000938 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <BSP_LCD_SetTextColor+0x14>)
 800093a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800093e:	210c      	movs	r1, #12
 8000940:	fb01 3302 	mla	r3, r1, r2, r3
 8000944:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000080 	.word	0x20000080

08000950 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <BSP_LCD_SetBackColor+0x14>)
 8000952:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000956:	210c      	movs	r1, #12
 8000958:	fb01 3302 	mla	r3, r1, r2, r3
 800095c:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000080 	.word	0x20000080

08000968 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <BSP_LCD_SetFont+0x14>)
 800096a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800096e:	210c      	movs	r1, #12
 8000970:	fb01 3302 	mla	r3, r1, r2, r3
 8000974:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000080 	.word	0x20000080

08000980 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <BSP_LCD_GetFont+0x14>)
 8000982:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000986:	210c      	movs	r1, #12
 8000988:	fb01 3302 	mla	r3, r1, r2, r3
}
 800098c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000080 	.word	0x20000080

08000998 <BSP_LCD_Clear>:
{
 8000998:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <BSP_LCD_Clear+0x28>)
  return (lcd_y_size);
 800099c:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <BSP_LCD_Clear+0x2c>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800099e:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80009a2:	9001      	str	r0, [sp, #4]
 80009a4:	2134      	movs	r1, #52	; 0x34
 80009a6:	fb01 3104 	mla	r1, r1, r4, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80009b2:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff ff20 	bl	80007fc <LL_FillBuffer>
}
 80009bc:	b002      	add	sp, #8
 80009be:	bd10      	pop	{r4, pc}
 80009c0:	20000080 	.word	0x20000080
 80009c4:	20000024 	.word	0x20000024

080009c8 <BSP_LCD_FillRect>:
{
 80009c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80009cc:	4d13      	ldr	r5, [pc, #76]	; (8000a1c <BSP_LCD_FillRect+0x54>)
{
 80009ce:	9303      	str	r3, [sp, #12]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80009d0:	f8d5 80e8 	ldr.w	r8, [r5, #232]	; 0xe8
 80009d4:	f04f 090c 	mov.w	r9, #12
 80009d8:	fb09 5908 	mla	r9, r9, r8, r5
{
 80009dc:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80009de:	f8d9 00ec 	ldr.w	r0, [r9, #236]	; 0xec
{
 80009e2:	4617      	mov	r7, r2
 80009e4:	468a      	mov	sl, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80009e6:	f7ff ffa7 	bl	8000938 <BSP_LCD_SetTextColor>
  return (lcd_x_size);
 80009ea:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <BSP_LCD_FillRect+0x58>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80009ec:	9b03      	ldr	r3, [sp, #12]
  return (lcd_x_size);
 80009ee:	6816      	ldr	r6, [r2, #0]
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80009f0:	2234      	movs	r2, #52	; 0x34
 80009f2:	fb02 5508 	mla	r5, r2, r8, r5
 80009f6:	fb06 440a 	mla	r4, r6, sl, r4
 80009fa:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80009fe:	f8d9 20ec 	ldr.w	r2, [r9, #236]	; 0xec
 8000a02:	9201      	str	r2, [sp, #4]
 8000a04:	1bf6      	subs	r6, r6, r7
 8000a06:	9600      	str	r6, [sp, #0]
 8000a08:	463a      	mov	r2, r7
 8000a0a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000a0e:	4640      	mov	r0, r8
 8000a10:	f7ff fef4 	bl	80007fc <LL_FillBuffer>
}
 8000a14:	b004      	add	sp, #16
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000024 	.word	0x20000024

08000a24 <DSI_IO_WriteCmd>:
  if(NbrParams <= 1)
 8000a24:	2801      	cmp	r0, #1
{
 8000a26:	b507      	push	{r0, r1, r2, lr}
  if(NbrParams <= 1)
 8000a28:	d80a      	bhi.n	8000a40 <DSI_IO_WriteCmd+0x1c>
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000a2a:	784b      	ldrb	r3, [r1, #1]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	780b      	ldrb	r3, [r1, #0]
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <DSI_IO_WriteCmd+0x30>)
 8000a32:	2215      	movs	r2, #21
 8000a34:	2100      	movs	r1, #0
 8000a36:	f001 f8f2 	bl	8001c1e <HAL_DSI_ShortWrite>
}
 8000a3a:	b003      	add	sp, #12
 8000a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000a40:	9101      	str	r1, [sp, #4]
 8000a42:	5c0b      	ldrb	r3, [r1, r0]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2239      	movs	r2, #57	; 0x39
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <DSI_IO_WriteCmd+0x30>)
 8000a4e:	f001 f8f7 	bl	8001c40 <HAL_DSI_LongWrite>
}
 8000a52:	e7f2      	b.n	8000a3a <DSI_IO_WriteCmd+0x16>
 8000a54:	200001f0 	.word	0x200001f0

08000a58 <BSP_LCD_MspInit>:
{
 8000a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <BSP_LCD_MspInit+0xa8>)
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	9401      	str	r4, [sp, #4]
 8000a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a66:	645a      	str	r2, [r3, #68]	; 0x44
 8000a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a6a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000a6e:	9201      	str	r2, [sp, #4]
 8000a70:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a74:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a82:	9402      	str	r4, [sp, #8]
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000a92:	9202      	str	r2, [sp, #8]
 8000a94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a9c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000aa4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000aa6:	9403      	str	r4, [sp, #12]
 8000aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000aaa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000aae:	645a      	str	r2, [r3, #68]	; 0x44
 8000ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000ab6:	9203      	str	r2, [sp, #12]
 8000ab8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000aca:	2103      	movs	r1, #3
 8000acc:	4622      	mov	r2, r4
 8000ace:	2058      	movs	r0, #88	; 0x58
 8000ad0:	f000 fbc6 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ad4:	2058      	movs	r0, #88	; 0x58
 8000ad6:	f000 fbf5 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000ada:	4622      	mov	r2, r4
 8000adc:	2103      	movs	r1, #3
 8000ade:	205a      	movs	r0, #90	; 0x5a
 8000ae0:	f000 fbbe 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ae4:	205a      	movs	r0, #90	; 0x5a
 8000ae6:	f000 fbed 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000aea:	4622      	mov	r2, r4
 8000aec:	2103      	movs	r1, #3
 8000aee:	205c      	movs	r0, #92	; 0x5c
 8000af0:	f000 fbb6 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000af4:	205c      	movs	r0, #92	; 0x5c
}
 8000af6:	b004      	add	sp, #16
 8000af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000afc:	f000 bbe2 	b.w	80012c4 <HAL_NVIC_EnableIRQ>
 8000b00:	40023800 	.word	0x40023800

08000b04 <BSP_LCD_InitEx>:
{
 8000b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hdsi_eval.Instance = DSI;
 8000b08:	4c5f      	ldr	r4, [pc, #380]	; (8000c88 <BSP_LCD_InitEx+0x184>)
 8000b0a:	4e60      	ldr	r6, [pc, #384]	; (8000c8c <BSP_LCD_InitEx+0x188>)
{
 8000b0c:	b08a      	sub	sp, #40	; 0x28
 8000b0e:	4607      	mov	r7, r0
  BSP_LCD_Reset();
 8000b10:	f7ff fea6 	bl	8000860 <BSP_LCD_Reset>
  BSP_LCD_MspInit();
 8000b14:	f7ff ffa0 	bl	8000a58 <BSP_LCD_MspInit>
  hdsi_eval.Instance = DSI;
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <BSP_LCD_InitEx+0x18c>)
 8000b1a:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  HAL_DSI_DeInit(&(hdsi_eval));
 8000b1e:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 8000b22:	f000 fed6 	bl	80018d2 <HAL_DSI_DeInit>
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8000b26:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e9cd e301 	strd	lr, r3, [sp, #4]
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	9303      	str	r3, [sp, #12]
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b34:	2304      	movs	r3, #4
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000b36:	eb0d 0103 	add.w	r1, sp, r3
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b3a:	f04f 0801 	mov.w	r8, #1
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000b3e:	f504 70b8 	add.w	r0, r4, #368	; 0x170
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b42:	e9c4 385e 	strd	r3, r8, [r4, #376]	; 0x178
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000b46:	f000 fe0f 	bl	8001768 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	f040 8094 	bne.w	8000c80 <BSP_LCD_InitEx+0x17c>
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b58:	e9c6 3200 	strd	r3, r2, [r6]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	2105      	movs	r1, #5
  VACT = lcd_y_size;
 8000b60:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b64:	e9c4 5141 	strd	r5, r1, [r4, #260]	; 0x104
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000b68:	2102      	movs	r1, #2
 8000b6a:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000b6e:	f640 71ff 	movw	r1, #4095	; 0xfff
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8000b72:	f04f 0c04 	mov.w	ip, #4
  hdsivideo_handle.NumberOfChunks = 0;
 8000b76:	e9c4 5146 	strd	r5, r1, [r4, #280]	; 0x118
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8000b7a:	214d      	movs	r1, #77	; 0x4d
 8000b7c:	e9c4 c14b 	strd	ip, r1, [r4, #300]	; 0x12c
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000b80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000b84:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000b88:	3346      	adds	r3, #70	; 0x46
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000b8a:	f04f 0e78 	mov.w	lr, #120	; 0x78
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000b8e:	434b      	muls	r3, r1
 8000b90:	f646 3125 	movw	r1, #27429	; 0x6b25
 8000b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b98:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000b9c:	2396      	movs	r3, #150	; 0x96
 8000b9e:	e9c4 e34e 	strd	lr, r3, [r4, #312]	; 0x138
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000ba2:	e9c4 3250 	strd	r3, r2, [r4, #320]	; 0x140
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000ba6:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8000baa:	2310      	movs	r3, #16
 8000bac:	e9c4 8352 	strd	r8, r3, [r4, #328]	; 0x148
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	e9c4 2355 	strd	r2, r3, [r4, #340]	; 0x154
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	e9c4 1357 	strd	r1, r3, [r4, #348]	; 0x15c
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000bc8:	4932      	ldr	r1, [pc, #200]	; (8000c94 <BSP_LCD_InitEx+0x190>)
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000bca:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd6:	e9c4 0359 	strd	r0, r3, [r4, #356]	; 0x164
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000bda:	f101 006c 	add.w	r0, r1, #108	; 0x6c
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000bde:	f04f 0823 	mov.w	r8, #35	; 0x23
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000be2:	e9c4 5548 	strd	r5, r5, [r4, #288]	; 0x120
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000be6:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000bea:	f000 febd 	bl	8001968 <HAL_DSI_ConfigVideoMode>
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8000bee:	a904      	add	r1, sp, #16
  PhyTimings.StopWaitTime = 10;
 8000bf0:	230a      	movs	r3, #10
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8000bf2:	4829      	ldr	r0, [pc, #164]	; (8000c98 <BSP_LCD_InitEx+0x194>)
  PhyTimings.StopWaitTime = 10;
 8000bf4:	9309      	str	r3, [sp, #36]	; 0x24
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000bf6:	e9cd 8804 	strd	r8, r8, [sp, #16]
  PhyTimings.DataLaneLP2HSTime = 35;
 8000bfa:	e9cd 8806 	strd	r8, r8, [sp, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bfe:	9508      	str	r5, [sp, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8000c00:	f000 ffae 	bl	8001b60 <HAL_DSI_ConfigPhyTimer>
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8000c04:	2301      	movs	r3, #1
 8000c06:	6563      	str	r3, [r4, #84]	; 0x54
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c08:	6833      	ldr	r3, [r6, #0]
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8000c0a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c0e:	eb03 0208 	add.w	r2, r3, r8
 8000c12:	6662      	str	r2, [r4, #100]	; 0x64
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c14:	f103 0245 	add.w	r2, r3, #69	; 0x45
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8000c18:	6873      	ldr	r3, [r6, #4]
 8000c1a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c28:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <BSP_LCD_InitEx+0x198>)
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c2e:	66e2      	str	r2, [r4, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000c36:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c3a:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000c3e:	f001 fbf5 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8000c42:	4914      	ldr	r1, [pc, #80]	; (8000c94 <BSP_LCD_InitEx+0x190>)
  hltdc_eval.Instance = LTDC;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <BSP_LCD_InitEx+0x19c>)
 8000c46:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8000c48:	f1a1 00c4 	sub.w	r0, r1, #196	; 0xc4
  hltdc_eval.Init.Backcolor.Blue = 0;
 8000c4c:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
  hltdc_eval.Init.Backcolor.Red = 0;
 8000c50:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c54:	6525      	str	r5, [r4, #80]	; 0x50
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8000c56:	f001 fac0 	bl	80021da <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_eval);
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <BSP_LCD_InitEx+0x1a0>)
 8000c5c:	f001 f9c4 	bl	8001fe8 <HAL_LTDC_Init>
  HAL_DSI_Start(&(hdsi_eval));
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <BSP_LCD_InitEx+0x194>)
 8000c62:	f000 ffb9 	bl	8001bd8 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000c66:	f000 fa21 	bl	80010ac <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <BSP_LCD_InitEx+0x1a4>)
 8000c6c:	f7ff fe7c 	bl	8000968 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000c70:	4639      	mov	r1, r7
 8000c72:	4628      	mov	r0, r5
 8000c74:	f7ff fc40 	bl	80004f8 <NT35510_Init>
}
 8000c78:	4628      	mov	r0, r5
 8000c7a:	b00a      	add	sp, #40	; 0x28
 8000c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000c80:	e9c6 2300 	strd	r2, r3, [r6]
 8000c84:	e76a      	b.n	8000b5c <BSP_LCD_InitEx+0x58>
 8000c86:	bf00      	nop
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	20000024 	.word	0x20000024
 8000c90:	40016c00 	.word	0x40016c00
 8000c94:	20000184 	.word	0x20000184
 8000c98:	200001f0 	.word	0x200001f0
 8000c9c:	2000020c 	.word	0x2000020c
 8000ca0:	40016800 	.word	0x40016800
 8000ca4:	200000c0 	.word	0x200000c0
 8000ca8:	2000002c 	.word	0x2000002c

08000cac <BSP_LCD_Init>:
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff bf29 	b.w	8000b04 <BSP_LCD_InitEx>
	...

08000cb4 <BSP_LCD_DrawPixel>:
  return (lcd_x_size);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <BSP_LCD_DrawPixel+0x20>)
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	fb03 0101 	mla	r1, r3, r1, r0
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <BSP_LCD_DrawPixel+0x24>)
 8000cbe:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
{
 8000cc2:	b510      	push	{r4, lr}
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cc4:	2434      	movs	r4, #52	; 0x34
 8000cc6:	fb04 3300 	mla	r3, r4, r0, r3
 8000cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000cd2:	bd10      	pop	{r4, pc}
 8000cd4:	20000024 	.word	0x20000024
 8000cd8:	20000080 	.word	0x20000080

08000cdc <BSP_LCD_DisplayChar>:
{
 8000cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ce6:	492b      	ldr	r1, [pc, #172]	; (8000d94 <BSP_LCD_DisplayChar+0xb8>)
 8000ce8:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
 8000cec:	200c      	movs	r0, #12
 8000cee:	fb00 110b 	mla	r1, r0, fp, r1
 8000cf2:	3a20      	subs	r2, #32
 8000cf4:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000cf8:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8000cfc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8000d00:	680d      	ldr	r5, [r1, #0]
 8000d02:	f109 0607 	add.w	r6, r9, #7
 8000d06:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000d08:	fb0a f202 	mul.w	r2, sl, r2
  offset =  8 *((width + 7)/8) -  width ;
 8000d0c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8000d10:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1)))
 8000d14:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8000d18:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8000d1c:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1)))
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8000d24:	45d0      	cmp	r8, sl
 8000d26:	eb03 0108 	add.w	r1, r3, r8
 8000d2a:	b289      	uxth	r1, r1
 8000d2c:	d302      	bcc.n	8000d34 <BSP_LCD_DisplayChar+0x58>
}
 8000d2e:	b005      	add	sp, #20
 8000d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000d34:	2e01      	cmp	r6, #1
      line =  pchar[0];
 8000d36:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8000d38:	d004      	beq.n	8000d44 <BSP_LCD_DisplayChar+0x68>
 8000d3a:	2e02      	cmp	r6, #2
 8000d3c:	d109      	bne.n	8000d52 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];
 8000d3e:	882c      	ldrh	r4, [r5, #0]
 8000d40:	ba64      	rev16	r4, r4
 8000d42:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8000d44:	2700      	movs	r7, #0
 8000d46:	45b9      	cmp	r9, r7
 8000d48:	d80a      	bhi.n	8000d60 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 8000d4a:	f108 0801 	add.w	r8, r8, #1
 8000d4e:	4435      	add	r5, r6
 8000d50:	e7e7      	b.n	8000d22 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000d52:	786a      	ldrb	r2, [r5, #1]
 8000d54:	0424      	lsls	r4, r4, #16
 8000d56:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8000d5a:	78aa      	ldrb	r2, [r5, #2]
 8000d5c:	4314      	orrs	r4, r2
      break;
 8000d5e:	e7f1      	b.n	8000d44 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1)))
 8000d60:	9b00      	ldr	r3, [sp, #0]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000d62:	9103      	str	r1, [sp, #12]
 8000d64:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1)))
 8000d66:	9b02      	ldr	r3, [sp, #8]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	eba3 0c07 	sub.w	ip, r3, r7
 8000d6e:	fa02 f20c 	lsl.w	r2, r2, ip
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <BSP_LCD_DisplayChar+0xb8>)
      if(line & (1 << (width- j + offset- 1)))
 8000d74:	4222      	tst	r2, r4
 8000d76:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000d7a:	fb02 320b 	mla	r2, r2, fp, r3
 8000d7e:	b280      	uxth	r0, r0
 8000d80:	bf14      	ite	ne
 8000d82:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000d86:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 8000d8a:	f7ff ff93 	bl	8000cb4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000d8e:	3701      	adds	r7, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000d90:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8000d92:	e7d8      	b.n	8000d46 <BSP_LCD_DisplayChar+0x6a>
 8000d94:	20000080 	.word	0x20000080

08000d98 <BSP_LCD_DisplayStringAt>:
{
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	4680      	mov	r8, r0
 8000d9e:	468a      	mov	sl, r1
 8000da0:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8000da2:	4614      	mov	r4, r2
 8000da4:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d1fa      	bne.n	8000da2 <BSP_LCD_DisplayStringAt+0xa>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <BSP_LCD_DisplayStringAt+0xa0>)
  return (lcd_x_size);
 8000dae:	4f23      	ldr	r7, [pc, #140]	; (8000e3c <BSP_LCD_DisplayStringAt+0xa4>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000db0:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
 8000db4:	260c      	movs	r6, #12
 8000db6:	fb06 2200 	mla	r2, r6, r0, r2
  switch (Mode)
 8000dba:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000dbc:	f8d2 60f4 	ldr.w	r6, [r2, #244]	; 0xf4
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	88b2      	ldrh	r2, [r6, #4]
 8000dc4:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8000dc8:	d01e      	beq.n	8000e08 <BSP_LCD_DisplayStringAt+0x70>
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d024      	beq.n	8000e18 <BSP_LCD_DisplayStringAt+0x80>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000dce:	fa0f f388 	sxth.w	r3, r8
    refcolumn = 1;
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bfd8      	it	le
 8000dd6:	f04f 0801 	movle.w	r8, #1
 8000dda:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000dde:	88b0      	ldrh	r0, [r6, #4]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f815 2009 	ldrb.w	r2, [r5, r9]
 8000de6:	fa1f f489 	uxth.w	r4, r9
 8000dea:	fb00 3314 	mls	r3, r0, r4, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4283      	cmp	r3, r0
 8000df2:	bf34      	ite	cc
 8000df4:	2300      	movcc	r3, #0
 8000df6:	2301      	movcs	r3, #1
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	f109 0901 	add.w	r9, r9, #1
 8000e02:	b983      	cbnz	r3, 8000e26 <BSP_LCD_DisplayStringAt+0x8e>
}
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000e08:	1b2c      	subs	r4, r5, r4
 8000e0a:	4404      	add	r4, r0
 8000e0c:	4354      	muls	r4, r2
 8000e0e:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000e12:	fa1f f880 	uxth.w	r8, r0
      break;
 8000e16:	e7da      	b.n	8000dce <BSP_LCD_DisplayStringAt+0x36>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000e18:	1b2c      	subs	r4, r5, r4
 8000e1a:	4404      	add	r4, r0
 8000e1c:	fb14 f402 	smulbb	r4, r4, r2
 8000e20:	eba4 0008 	sub.w	r0, r4, r8
 8000e24:	e7f5      	b.n	8000e12 <BSP_LCD_DisplayStringAt+0x7a>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000e26:	4640      	mov	r0, r8
 8000e28:	4651      	mov	r1, sl
 8000e2a:	f7ff ff57 	bl	8000cdc <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000e2e:	88b0      	ldrh	r0, [r6, #4]
 8000e30:	4440      	add	r0, r8
 8000e32:	fa1f f880 	uxth.w	r8, r0
    i++;
 8000e36:	e7d2      	b.n	8000dde <BSP_LCD_DisplayStringAt+0x46>
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	20000024 	.word	0x20000024

08000e40 <BSP_LCD_DisplayStringAtLine>:
{
 8000e40:	b513      	push	{r0, r1, r4, lr}
 8000e42:	4604      	mov	r4, r0
 8000e44:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000e46:	f7ff fd9b 	bl	8000980 <BSP_LCD_GetFont>
 8000e4a:	88c3      	ldrh	r3, [r0, #6]
 8000e4c:	9a01      	ldr	r2, [sp, #4]
 8000e4e:	fb13 f104 	smulbb	r1, r3, r4
 8000e52:	b289      	uxth	r1, r1
 8000e54:	2303      	movs	r3, #3
 8000e56:	2000      	movs	r0, #0
}
 8000e58:	b002      	add	sp, #8
 8000e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000e5e:	f7ff bf9b 	b.w	8000d98 <BSP_LCD_DisplayStringAt>
	...

08000e64 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000e68:	4c21      	ldr	r4, [pc, #132]	; (8000ef0 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e6a:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e6c:	19e5      	adds	r5, r4, r7
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e6e:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8000e70:	f04f 0800 	mov.w	r8, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e74:	4621      	mov	r1, r4
{
 8000e76:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e7e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8000e82:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd = 0;
 8000e86:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e8a:	f001 fe0c 	bl	8002aa6 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 f9c0 	bl	8001214 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000e94:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e96:	4621      	mov	r1, r4
 8000e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e9e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8000ea2:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ea6:	f001 fdfe 	bl	8002aa6 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000eaa:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000eac:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000eb0:	4621      	mov	r1, r4
  Command.AutoRefreshNumber      = 8;
 8000eb2:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb8:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 8000eba:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ebe:	f001 fdf2 	bl	8002aa6 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000ec2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000ec6:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000ec8:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000eca:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ece:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = tmpmrd;
 8000ed0:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8000ed2:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed8:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = tmpmrd;
 8000eda:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000edc:	f001 fde3 	bl	8002aa6 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	4628      	mov	r0, r5
}
 8000ee4:	b003      	add	sp, #12
 8000ee6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8000eea:	f001 bdfa 	b.w	8002ae2 <HAL_SDRAM_ProgramRefreshRate>
 8000eee:	bf00      	nop
 8000ef0:	20000248 	.word	0x20000248

08000ef4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000ef4:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000ef6:	4606      	mov	r6, r0
{
 8000ef8:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000efa:	2800      	cmp	r0, #0
 8000efc:	f000 80bf 	beq.w	800107e <BSP_SDRAM_MspInit+0x18a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8000f00:	4b60      	ldr	r3, [pc, #384]	; (8001084 <BSP_SDRAM_MspInit+0x190>)
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = GPIO_AF12_FMC;

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000f02:	4861      	ldr	r0, [pc, #388]	; (8001088 <BSP_SDRAM_MspInit+0x194>)
    __HAL_RCC_FMC_CLK_ENABLE();
 8000f04:	2400      	movs	r4, #0
 8000f06:	9400      	str	r4, [sp, #0]
 8000f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f12:	f002 0201 	and.w	r2, r2, #1
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	9a00      	ldr	r2, [sp, #0]
    __DMAx_CLK_ENABLE();
 8000f1a:	9401      	str	r4, [sp, #4]
 8000f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
 8000f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f26:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	9402      	str	r4, [sp, #8]
 8000f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f32:	f042 0204 	orr.w	r2, r2, #4
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
 8000f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3a:	f002 0204 	and.w	r2, r2, #4
 8000f3e:	9202      	str	r2, [sp, #8]
 8000f40:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	9403      	str	r4, [sp, #12]
 8000f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f46:	f042 0208 	orr.w	r2, r2, #8
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4e:	f002 0208 	and.w	r2, r2, #8
 8000f52:	9203      	str	r2, [sp, #12]
 8000f54:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f56:	9404      	str	r4, [sp, #16]
 8000f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5a:	f042 0210 	orr.w	r2, r2, #16
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f62:	f002 0210 	and.w	r2, r2, #16
 8000f66:	9204      	str	r2, [sp, #16]
 8000f68:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	9405      	str	r4, [sp, #20]
 8000f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
 8000f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f76:	f002 0220 	and.w	r2, r2, #32
 8000f7a:	9205      	str	r2, [sp, #20]
 8000f7c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	9406      	str	r4, [sp, #24]
 8000f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
 8000f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000f8e:	9206      	str	r2, [sp, #24]
 8000f90:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f92:	9407      	str	r4, [sp, #28]
 8000f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fa2:	9207      	str	r2, [sp, #28]
 8000fa4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fa6:	9408      	str	r4, [sp, #32]
 8000fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fb8:	2202      	movs	r2, #2
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fba:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000fbc:	920c      	str	r2, [sp, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000fc4:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	920d      	str	r2, [sp, #52]	; 0x34
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8000fca:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000fcc:	f000 fe9a 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000fd0:	f24c 7303 	movw	r3, #50947	; 0xc703
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <BSP_SDRAM_MspInit+0x198>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000fd6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000fd8:	a909      	add	r1, sp, #36	; 0x24
 8000fda:	f000 fe93 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000fde:	f64f 7383 	movw	r3, #65411	; 0xff83
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000fe2:	482b      	ldr	r0, [pc, #172]	; (8001090 <BSP_SDRAM_MspInit+0x19c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000fe4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000fe6:	a909      	add	r1, sp, #36	; 0x24
 8000fe8:	f000 fe8c 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000fec:	f64f 033f 	movw	r3, #63551	; 0xf83f
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000ff0:	4828      	ldr	r0, [pc, #160]	; (8001094 <BSP_SDRAM_MspInit+0x1a0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000ff2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000ff4:	a909      	add	r1, sp, #36	; 0x24
 8000ff6:	f000 fe85 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8000ffa:	f248 1333 	movw	r3, #33075	; 0x8133
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000ffe:	4826      	ldr	r0, [pc, #152]	; (8001098 <BSP_SDRAM_MspInit+0x1a4>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001000:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001002:	a909      	add	r1, sp, #36	; 0x24
 8001004:	f000 fe7e 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001008:	f64f 730c 	movw	r3, #65292	; 0xff0c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800100c:	4823      	ldr	r0, [pc, #140]	; (800109c <BSP_SDRAM_MspInit+0x1a8>)
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800100e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001010:	a909      	add	r1, sp, #36	; 0x24
 8001012:	f000 fe77 	bl	8001d04 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001016:	f240 63ff 	movw	r3, #1791	; 0x6ff
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800101a:	4821      	ldr	r0, [pc, #132]	; (80010a0 <BSP_SDRAM_MspInit+0x1ac>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800101c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800101e:	a909      	add	r1, sp, #36	; 0x24
 8001020:	f000 fe70 	bl	8001d04 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <BSP_SDRAM_MspInit+0x1b0>)
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102c:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001030:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800103c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dma_handle.Init.Mode                = DMA_NORMAL;
 8001040:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001044:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001048:	461d      	mov	r5, r3
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800104a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800104e:	2203      	movs	r2, #3
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001050:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <BSP_SDRAM_MspInit+0x1b4>)
 8001056:	f845 2f44 	str.w	r2, [r5, #68]!
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800105a:	675c      	str	r4, [r3, #116]	; 0x74

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 800105c:	4628      	mov	r0, r5
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800105e:	6335      	str	r5, [r6, #48]	; 0x30
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001060:	649c      	str	r4, [r3, #72]	; 0x48
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001062:	67de      	str	r6, [r3, #124]	; 0x7c
    HAL_DMA_DeInit(&dma_handle);
 8001064:	f000 f9e6 	bl	8001434 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8001068:	4628      	mov	r0, r5
 800106a:	f000 f963 	bl	8001334 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800106e:	2038      	movs	r0, #56	; 0x38
 8001070:	4622      	mov	r2, r4
 8001072:	2105      	movs	r1, #5
 8001074:	f000 f8f4 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001078:	2038      	movs	r0, #56	; 0x38
 800107a:	f000 f923 	bl	80012c4 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800107e:	b00e      	add	sp, #56	; 0x38
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40021400 	.word	0x40021400
 8001098:	40021800 	.word	0x40021800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40022000 	.word	0x40022000
 80010a4:	20000248 	.word	0x20000248
 80010a8:	40026410 	.word	0x40026410

080010ac <BSP_SDRAM_Init>:
{
 80010ac:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80010ae:	4c1b      	ldr	r4, [pc, #108]	; (800111c <BSP_SDRAM_Init+0x70>)
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <BSP_SDRAM_Init+0x74>)
 80010b2:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 80010b4:	2107      	movs	r1, #7
 80010b6:	2302      	movs	r3, #2
  Timing.SelfRefreshTime      = 4;
 80010b8:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80010ba:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 80010be:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  Timing.RCDDelay             = 2;
 80010c2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010c6:	2020      	movs	r0, #32
 80010c8:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 80010ca:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ce:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80010d2:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80010d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80010d8:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010dc:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80010e0:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80010ec:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010ee:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80010f2:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80010f4:	f7ff fefe 	bl	8000ef4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80010f8:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80010fc:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001100:	f001 fcb1 	bl	8002a66 <HAL_SDRAM_Init>
 8001104:	4c07      	ldr	r4, [pc, #28]	; (8001124 <BSP_SDRAM_Init+0x78>)
 8001106:	3800      	subs	r0, #0
 8001108:	bf18      	it	ne
 800110a:	2001      	movne	r0, #1
 800110c:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800110e:	f240 5069 	movw	r0, #1385	; 0x569
 8001112:	f7ff fea7 	bl	8000e64 <BSP_SDRAM_Initialization_sequence>
}
 8001116:	7820      	ldrb	r0, [r4, #0]
 8001118:	bd10      	pop	{r4, pc}
 800111a:	bf00      	nop
 800111c:	20000248 	.word	0x20000248
 8001120:	a0000140 	.word	0xa0000140
 8001124:	20000054 	.word	0x20000054

08001128 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	490f      	ldr	r1, [pc, #60]	; (8001168 <SystemInit+0x40>)
 800112a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800112e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <SystemInit+0x44>)
 8001138:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800113a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800113c:	f042 0201 	orr.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001142:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800114a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800114e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <SystemInit+0x48>)
 8001152:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800115a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800115c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800115e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001162:	608b      	str	r3, [r1, #8]
#endif
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	40023800 	.word	0x40023800
 8001170:	24003010 	.word	0x24003010

08001174 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001174:	4770      	bx	lr
	...

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_InitTick+0x3c>)
 800117c:	4e0e      	ldr	r6, [pc, #56]	; (80011b8 <HAL_InitTick+0x40>)
{
 800117e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	7830      	ldrb	r0, [r6, #0]
 8001186:	fbb3 f3f0 	udiv	r3, r3, r0
 800118a:	6810      	ldr	r0, [r2, #0]
 800118c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001190:	f000 f8a6 	bl	80012e0 <HAL_SYSTICK_Config>
 8001194:	4604      	mov	r4, r0
 8001196:	b950      	cbnz	r0, 80011ae <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	2d0f      	cmp	r5, #15
 800119a:	d808      	bhi.n	80011ae <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	4602      	mov	r2, r0
 800119e:	4629      	mov	r1, r5
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f000 f85c 	bl	8001260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	6075      	str	r5, [r6, #4]
 80011aa:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
 80011b0:	e7fc      	b.n	80011ac <HAL_InitTick+0x34>
 80011b2:	bf00      	nop
 80011b4:	20000058 	.word	0x20000058
 80011b8:	2000005c 	.word	0x2000005c

080011bc <HAL_Init>:
{
 80011bc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x30>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f82f 	bl	800123c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff ffca 	bl	8001178 <HAL_InitTick>
  HAL_MspInit();
 80011e4:	f7ff ffc6 	bl	8001174 <HAL_MspInit>
}
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd08      	pop	{r3, pc}
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x10>)
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_IncTick+0x14>)
 80011f4:	6811      	ldr	r1, [r2, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	440b      	add	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000368 	.word	0x20000368
 8001204:	2000005c 	.word	0x2000005c

08001208 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001208:	4b01      	ldr	r3, [pc, #4]	; (8001210 <HAL_GetTick+0x8>)
 800120a:	6818      	ldr	r0, [r3, #0]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000368 	.word	0x20000368

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff6 	bl	8001208 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	bf1c      	itt	ne
 8001220:	4b05      	ldrne	r3, [pc, #20]	; (8001238 <HAL_Delay+0x24>)
 8001222:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001224:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001226:	bf18      	it	ne
 8001228:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	f7ff ffed 	bl	8001208 <HAL_GetTick>
 800122e:	1b43      	subs	r3, r0, r5
 8001230:	42a3      	cmp	r3, r4
 8001232:	d3fa      	bcc.n	800122a <HAL_Delay+0x16>
  {
  }
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
 8001236:	bf00      	nop
 8001238:	2000005c 	.word	0x2000005c

0800123c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800123e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001258:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b530      	push	{r4, r5, lr}
 8001264:	68dc      	ldr	r4, [r3, #12]
 8001266:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	2d04      	cmp	r5, #4
 8001272:	bf28      	it	cs
 8001274:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127c:	bf8c      	ite	hi
 800127e:	3c03      	subhi	r4, #3
 8001280:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001282:	fa03 f505 	lsl.w	r5, r3, r5
 8001286:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128a:	40a3      	lsls	r3, r4
 800128c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001292:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	bfac      	ite	ge
 800129a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	4a08      	ldrlt	r2, [pc, #32]	; (80012c0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	bfb8      	it	lt
 80012a6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	bfaa      	itet	ge
 80012ae:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012b8:	bd30      	pop	{r4, r5, pc}
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	e000ed14 	.word	0xe000ed14

080012c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012c4:	2800      	cmp	r0, #0
 80012c6:	db08      	blt.n	80012da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c8:	0942      	lsrs	r2, r0, #5
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 001f 	and.w	r0, r0, #31
 80012d0:	fa03 f000 	lsl.w	r0, r3, r0
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <HAL_NVIC_EnableIRQ+0x18>)
 80012d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	3801      	subs	r0, #1
 80012e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012e6:	d20b      	bcs.n	8001300 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	21f0      	movs	r1, #240	; 0xf0
 80012f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001308:	6803      	ldr	r3, [r0, #0]
{
 800130a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130c:	4c08      	ldr	r4, [pc, #32]	; (8001330 <DMA_CalcBaseAndBitshift+0x28>)
{
 800130e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001310:	b2d9      	uxtb	r1, r3
 8001312:	3910      	subs	r1, #16
 8001314:	2018      	movs	r0, #24
 8001316:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800131a:	5c20      	ldrb	r0, [r4, r0]
 800131c:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800131e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001322:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8001326:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001328:	bf88      	it	hi
 800132a:	3004      	addhi	r0, #4
 800132c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800132e:	bd10      	pop	{r4, pc}
 8001330:	08006bdb 	.word	0x08006bdb

08001334 <HAL_DMA_Init>:
{
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ff66 	bl	8001208 <HAL_GetTick>
 800133c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800133e:	2c00      	cmp	r4, #0
 8001340:	d073      	beq.n	800142a <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001342:	2302      	movs	r3, #2
 8001344:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001348:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800134a:	2300      	movs	r3, #0
 800134c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	6821      	ldr	r1, [r4, #0]
 800135a:	680b      	ldr	r3, [r1, #0]
 800135c:	07d8      	lsls	r0, r3, #31
 800135e:	d42f      	bmi.n	80013c0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001360:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001362:	4d33      	ldr	r5, [pc, #204]	; (8001430 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001366:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001368:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	68e2      	ldr	r2, [r4, #12]
 8001370:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001372:	6922      	ldr	r2, [r4, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	6962      	ldr	r2, [r4, #20]
 8001378:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137a:	69e2      	ldr	r2, [r4, #28]
 800137c:	4303      	orrs	r3, r0
 800137e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001380:	6a22      	ldr	r2, [r4, #32]
 8001382:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001386:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001388:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800138c:	bf02      	ittt	eq
 800138e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001392:	4335      	orreq	r5, r6
 8001394:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001396:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001398:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800139a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800139c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80013a0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a4:	d133      	bne.n	800140e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80013a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80013aa:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ac:	b37d      	cbz	r5, 800140e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013ae:	b990      	cbnz	r0, 80013d6 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d021      	beq.n	80013f8 <HAL_DMA_Init+0xc4>
 80013b4:	f032 0202 	bics.w	r2, r2, #2
 80013b8:	d129      	bne.n	800140e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013ba:	01ea      	lsls	r2, r5, #7
 80013bc:	d527      	bpl.n	800140e <HAL_DMA_Init+0xda>
 80013be:	e01e      	b.n	80013fe <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c0:	f7ff ff22 	bl	8001208 <HAL_GetTick>
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	2805      	cmp	r0, #5
 80013c8:	d9c6      	bls.n	8001358 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ca:	2320      	movs	r3, #32
 80013cc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80013d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013d6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80013da:	d114      	bne.n	8001406 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80013dc:	2a03      	cmp	r2, #3
 80013de:	d816      	bhi.n	800140e <HAL_DMA_Init+0xda>
 80013e0:	a001      	add	r0, pc, #4	; (adr r0, 80013e8 <HAL_DMA_Init+0xb4>)
 80013e2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	080013ff 	.word	0x080013ff
 80013ec:	080013bb 	.word	0x080013bb
 80013f0:	080013ff 	.word	0x080013ff
 80013f4:	080013f9 	.word	0x080013f9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80013fc:	d107      	bne.n	800140e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001402:	2001      	movs	r0, #1
 8001404:	e7e4      	b.n	80013d0 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001406:	2a02      	cmp	r2, #2
 8001408:	d9f9      	bls.n	80013fe <HAL_DMA_Init+0xca>
 800140a:	2a03      	cmp	r2, #3
 800140c:	d0d5      	beq.n	80013ba <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800140e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff79 	bl	8001308 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001416:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001418:	233f      	movs	r3, #63	; 0x3f
 800141a:	4093      	lsls	r3, r2
 800141c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001420:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001424:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001428:	e7d4      	b.n	80013d4 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e7d2      	b.n	80013d4 <HAL_DMA_Init+0xa0>
 800142e:	bf00      	nop
 8001430:	f010803f 	.word	0xf010803f

08001434 <HAL_DMA_DeInit>:
{
 8001434:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001436:	4605      	mov	r5, r0
 8001438:	b320      	cbz	r0, 8001484 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800143a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800143e:	2b02      	cmp	r3, #2
 8001440:	b2dc      	uxtb	r4, r3
 8001442:	d01d      	beq.n	8001480 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 800144c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800144e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001450:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001452:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001454:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001456:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001458:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800145a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 800145c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800145e:	f7ff ff53 	bl	8001308 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001462:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001464:	233f      	movs	r3, #63	; 0x3f
 8001466:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8001468:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800146c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8001470:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001474:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001476:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001478:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800147c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8001480:	4620      	mov	r0, r4
 8001482:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001484:	2401      	movs	r4, #1
 8001486:	e7fb      	b.n	8001480 <HAL_DMA_DeInit+0x4c>

08001488 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800148a:	6804      	ldr	r4, [r0, #0]
 800148c:	9d04      	ldr	r5, [sp, #16]
 800148e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001490:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001494:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001498:	4333      	orrs	r3, r6
 800149a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800149c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800149e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80014a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014a4:	d130      	bne.n	8001508 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80014a6:	6886      	ldr	r6, [r0, #8]
 80014a8:	b11e      	cbz	r6, 80014b2 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80014aa:	2e01      	cmp	r6, #1
 80014ac:	d103      	bne.n	80014b6 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80014ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014b2:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80014b4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80014b6:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80014b8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80014bc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80014c0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80014c2:	d107      	bne.n	80014d4 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80014c4:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80014c6:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80014c8:	02db      	lsls	r3, r3, #11
 80014ca:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80014ce:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 80014d2:	e7ee      	b.n	80014b2 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80014d4:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80014d6:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80014da:	d10a      	bne.n	80014f2 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 80014dc:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 80014de:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80014e0:	0289      	lsls	r1, r1, #10
 80014e2:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80014e6:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 80014ea:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80014ec:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 80014f0:	e7df      	b.n	80014b2 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 80014f2:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 80014f4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80014f6:	0209      	lsls	r1, r1, #8
 80014f8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80014fc:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8001500:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001502:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8001506:	e7d4      	b.n	80014b2 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001508:	60e1      	str	r1, [r4, #12]
}
 800150a:	e7d3      	b.n	80014b4 <DMA2D_SetConfig+0x2c>

0800150c <HAL_DMA2D_MspInit>:
}
 800150c:	4770      	bx	lr

0800150e <HAL_DMA2D_Init>:
{
 800150e:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8001510:	4604      	mov	r4, r0
 8001512:	b330      	cbz	r0, 8001562 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001514:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001518:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800151c:	b91b      	cbnz	r3, 8001526 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800151e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001522:	f7ff fff3 	bl	800150c <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001526:	6822      	ldr	r2, [r4, #0]
 8001528:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800152a:	2302      	movs	r3, #2
 800152c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001536:	430b      	orrs	r3, r1
 8001538:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800153a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800153c:	68a1      	ldr	r1, [r4, #8]
 800153e:	f023 0307 	bic.w	r3, r3, #7
 8001542:	430b      	orrs	r3, r1
 8001544:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001546:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001548:	68e1      	ldr	r1, [r4, #12]
 800154a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800154e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001552:	430b      	orrs	r3, r1
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001556:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001558:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800155a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800155c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001560:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e7fc      	b.n	8001560 <HAL_DMA2D_Init+0x52>

08001566 <HAL_DMA2D_Start>:
{
 8001566:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001568:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 800156c:	2d01      	cmp	r5, #1
{
 800156e:	4604      	mov	r4, r0
 8001570:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8001574:	d00f      	beq.n	8001596 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001576:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800157a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800157c:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 800157e:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001582:	9500      	str	r5, [sp, #0]
 8001584:	f7ff ff80 	bl	8001488 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	4333      	orrs	r3, r6
 800158e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001590:	2000      	movs	r0, #0
}
 8001592:	b002      	add	sp, #8
 8001594:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001596:	4628      	mov	r0, r5
 8001598:	e7fb      	b.n	8001592 <HAL_DMA2D_Start+0x2c>

0800159a <HAL_DMA2D_PollForTransfer>:
{
 800159a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800159c:	2300      	movs	r3, #0
 800159e:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80015a0:	6803      	ldr	r3, [r0, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	07db      	lsls	r3, r3, #31
{
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80015aa:	d417      	bmi.n	80015dc <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80015b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b2:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80015b4:	069e      	lsls	r6, r3, #26
 80015b6:	d506      	bpl.n	80015c6 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80015b8:	f7ff fe26 	bl	8001208 <HAL_GetTick>
 80015bc:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	06d2      	lsls	r2, r2, #27
 80015c4:	d543      	bpl.n	800164e <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	2212      	movs	r2, #18
 80015ca:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 80015cc:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80015d4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80015d8:	b002      	add	sp, #8
 80015da:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80015dc:	f7ff fe14 	bl	8001208 <HAL_GetTick>
 80015e0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	0792      	lsls	r2, r2, #30
 80015e8:	d4e0      	bmi.n	80015ac <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80015ee:	9a01      	ldr	r2, [sp, #4]
 80015f0:	f012 0f21 	tst.w	r2, #33	; 0x21
 80015f4:	d017      	beq.n	8001626 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80015f6:	9a01      	ldr	r2, [sp, #4]
 80015f8:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80015fa:	bf42      	ittt	mi
 80015fc:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015fe:	f042 0202 	orrmi.w	r2, r2, #2
 8001602:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001604:	9a01      	ldr	r2, [sp, #4]
 8001606:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001608:	bf42      	ittt	mi
 800160a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800160c:	f042 0201 	orrmi.w	r2, r2, #1
 8001610:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001612:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001614:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001616:	2304      	movs	r3, #4
 8001618:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800161c:	2300      	movs	r3, #0
 800161e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
 8001624:	e7d8      	b.n	80015d8 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8001626:	1c69      	adds	r1, r5, #1
 8001628:	d0dc      	beq.n	80015e4 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800162a:	f7ff fded 	bl	8001208 <HAL_GetTick>
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	42a8      	cmp	r0, r5
 8001632:	d801      	bhi.n	8001638 <HAL_DMA2D_PollForTransfer+0x9e>
 8001634:	2d00      	cmp	r5, #0
 8001636:	d1d4      	bne.n	80015e2 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800163a:	f043 0320 	orr.w	r3, r3, #32
 800163e:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001640:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001642:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001644:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001648:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800164c:	e7c4      	b.n	80015d8 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001652:	9a01      	ldr	r2, [sp, #4]
 8001654:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001658:	d016      	beq.n	8001688 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800165a:	9a01      	ldr	r2, [sp, #4]
 800165c:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800165e:	bf42      	ittt	mi
 8001660:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001662:	f042 0204 	orrmi.w	r2, r2, #4
 8001666:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001668:	9a01      	ldr	r2, [sp, #4]
 800166a:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800166c:	bf42      	ittt	mi
 800166e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001670:	f042 0202 	orrmi.w	r2, r2, #2
 8001674:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001676:	9a01      	ldr	r2, [sp, #4]
 8001678:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800167a:	bf42      	ittt	mi
 800167c:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800167e:	f042 0201 	orrmi.w	r2, r2, #1
 8001682:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001684:	2229      	movs	r2, #41	; 0x29
 8001686:	e7c5      	b.n	8001614 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8001688:	1c69      	adds	r1, r5, #1
 800168a:	d099      	beq.n	80015c0 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800168c:	f7ff fdbc 	bl	8001208 <HAL_GetTick>
 8001690:	1b80      	subs	r0, r0, r6
 8001692:	42a8      	cmp	r0, r5
 8001694:	d8d0      	bhi.n	8001638 <HAL_DMA2D_PollForTransfer+0x9e>
 8001696:	2d00      	cmp	r5, #0
 8001698:	d191      	bne.n	80015be <HAL_DMA2D_PollForTransfer+0x24>
 800169a:	e7cd      	b.n	8001638 <HAL_DMA2D_PollForTransfer+0x9e>

0800169c <HAL_DMA2D_ConfigLayer>:
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800169e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f04f 0302 	mov.w	r3, #2
 80016a8:	d02b      	beq.n	8001702 <HAL_DMA2D_ConfigLayer+0x66>
 80016aa:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80016b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80016b4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80016b8:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80016bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80016be:	4f18      	ldr	r7, [pc, #96]	; (8001720 <HAL_DMA2D_ConfigLayer+0x84>)
 80016c0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016c4:	3c09      	subs	r4, #9
 80016c6:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80016c8:	bf9c      	itt	ls
 80016ca:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 80016ce:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80016d0:	ea4f 1601 	mov.w	r6, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80016d4:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80016d6:	bf88      	it	hi
 80016d8:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80016dc:	b999      	cbnz	r1, 8001706 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80016de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016e0:	4039      	ands	r1, r7
 80016e2:	430a      	orrs	r2, r1
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016e6:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80016e8:	6982      	ldr	r2, [r0, #24]
 80016ea:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016ec:	d803      	bhi.n	80016f6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80016ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80016f0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80016fc:	2300      	movs	r3, #0
 80016fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8001702:	4618      	mov	r0, r3
}
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001706:	69d9      	ldr	r1, [r3, #28]
 8001708:	4039      	ands	r1, r7
 800170a:	430a      	orrs	r2, r1
 800170c:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800170e:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001710:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001712:	6992      	ldr	r2, [r2, #24]
 8001714:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001716:	bf9c      	itt	ls
 8001718:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 800171c:	621d      	strls	r5, [r3, #32]
 800171e:	e7ea      	b.n	80016f6 <HAL_DMA2D_ConfigLayer+0x5a>
 8001720:	00fcfff0 	.word	0x00fcfff0

08001724 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8001724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001728:	4607      	mov	r7, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4614      	mov	r4, r2
 800172e:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001730:	f7ff fd6a 	bl	8001208 <HAL_GetTick>
 8001734:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800173a:	07d2      	lsls	r2, r2, #31
 800173c:	d50a      	bpl.n	8001754 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800173e:	9906      	ldr	r1, [sp, #24]
 8001740:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8001744:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001748:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800174c:	66dc      	str	r4, [r3, #108]	; 0x6c

  return HAL_OK;
 800174e:	2000      	movs	r0, #0
}
 8001750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001754:	f7ff fd58 	bl	8001208 <HAL_GetTick>
 8001758:	eba0 0008 	sub.w	r0, r0, r8
 800175c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001760:	d9e9      	bls.n	8001736 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
 8001764:	e7f4      	b.n	8001750 <DSI_ShortWrite+0x2c>

08001766 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8001766:	4770      	bx	lr

08001768 <HAL_DSI_Init>:
{
 8001768:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800176a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800176c:	4604      	mov	r4, r0
 800176e:	2800      	cmp	r0, #0
 8001770:	f000 80a9 	beq.w	80018c6 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8001774:	7c43      	ldrb	r3, [r0, #17]
 8001776:	b90b      	cbnz	r3, 800177c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8001778:	f7ff fff5 	bl	8001766 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800177c:	2303      	movs	r3, #3
 800177e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8001780:	2300      	movs	r3, #0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800178a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800178e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001792:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800179e:	f7ff fd33 	bl	8001208 <HAL_GetTick>
 80017a2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80017aa:	04d9      	lsls	r1, r3, #19
 80017ac:	d57a      	bpl.n	80018a4 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80017ae:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80017b2:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80017b6:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80017ba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80017be:	e9d5 0300 	ldrd	r0, r3, [r5]
 80017c2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80017c4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80017c8:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80017ca:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80017ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80017d2:	430b      	orrs	r3, r1
 80017d4:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80017e8:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	9301      	str	r3, [sp, #4]
  HAL_Delay(1);
 80017f2:	2001      	movs	r0, #1
  __HAL_DSI_PLL_ENABLE(hdsi);
 80017f4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80017f6:	f7ff fd0d 	bl	8001214 <HAL_Delay>
  tickstart = HAL_GetTick();
 80017fa:	f7ff fd05 	bl	8001208 <HAL_GetTick>
 80017fe:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001806:	05d2      	lsls	r2, r2, #23
 8001808:	d556      	bpl.n	80018b8 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800180a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800180e:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001810:	f042 0206 	orr.w	r2, r2, #6
 8001814:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8001818:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800181c:	f022 0203 	bic.w	r2, r2, #3
 8001820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001824:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001828:	430a      	orrs	r2, r1
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001832:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001836:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001838:	f022 0203 	bic.w	r2, r2, #3
 800183c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001840:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001844:	430a      	orrs	r2, r1
 8001846:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800184a:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800184c:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800184e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001852:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800185a:	686a      	ldr	r2, [r5, #4]
 800185c:	491b      	ldr	r1, [pc, #108]	; (80018cc <HAL_DSI_Init+0x164>)
 800185e:	2a01      	cmp	r2, #1
 8001860:	bf38      	it	cc
 8001862:	2201      	movcc	r2, #1
 8001864:	434a      	muls	r2, r1
 8001866:	68a9      	ldr	r1, [r5, #8]
 8001868:	f001 0103 	and.w	r1, r1, #3
 800186c:	408a      	lsls	r2, r1
 800186e:	6829      	ldr	r1, [r5, #0]
 8001870:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001874:	4341      	muls	r1, r0
 8001876:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800187a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800187e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001882:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001886:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800188a:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800188c:	430a      	orrs	r2, r1
 800188e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8001892:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001896:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800189a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800189c:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800189e:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80018a0:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80018a2:	e007      	b.n	80018b4 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80018a4:	f7ff fcb0 	bl	8001208 <HAL_GetTick>
 80018a8:	1b80      	subs	r0, r0, r6
 80018aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018ae:	f67f af79 	bls.w	80017a4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80018b2:	2003      	movs	r0, #3
}
 80018b4:	b002      	add	sp, #8
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80018b8:	f7ff fca6 	bl	8001208 <HAL_GetTick>
 80018bc:	1b80      	subs	r0, r0, r6
 80018be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018c2:	d99d      	bls.n	8001800 <HAL_DSI_Init+0x98>
 80018c4:	e7f5      	b.n	80018b2 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	e7f4      	b.n	80018b4 <HAL_DSI_Init+0x14c>
 80018ca:	bf00      	nop
 80018cc:	003d0900 	.word	0x003d0900

080018d0 <HAL_DSI_MspDeInit>:
 80018d0:	4770      	bx	lr

080018d2 <HAL_DSI_DeInit>:
{
 80018d2:	b530      	push	{r4, r5, lr}
  if (hdsi == NULL)
 80018d4:	4605      	mov	r5, r0
{
 80018d6:	b085      	sub	sp, #20
  if (hdsi == NULL)
 80018d8:	2800      	cmp	r0, #0
 80018da:	d042      	beq.n	8001962 <HAL_DSI_DeInit+0x90>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80018dc:	2303      	movs	r3, #3
 80018de:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80018e0:	2400      	movs	r4, #0
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	9400      	str	r4, [sp, #0]
 80018e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80018ea:	f022 0208 	bic.w	r2, r2, #8
 80018ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80018f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80018f6:	f002 0208 	and.w	r2, r2, #8
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 80018fe:	9401      	str	r4, [sp, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	f002 0201 	and.w	r2, r2, #1
 800190e:	9201      	str	r2, [sp, #4]
 8001910:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001912:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001916:	f022 0206 	bic.w	r2, r2, #6
 800191a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 800191e:	9402      	str	r4, [sp, #8]
 8001920:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800192c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001930:	f002 0201 	and.w	r2, r2, #1
 8001934:	9202      	str	r2, [sp, #8]
 8001936:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8001938:	9403      	str	r4, [sp, #12]
 800193a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800193e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001942:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001946:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800194a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194e:	9303      	str	r3, [sp, #12]
 8001950:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8001952:	f7ff ffbd 	bl	80018d0 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001956:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 8001958:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 800195a:	746c      	strb	r4, [r5, #17]
  return HAL_OK;
 800195c:	4620      	mov	r0, r4
}
 800195e:	b005      	add	sp, #20
 8001960:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
 8001964:	e7fb      	b.n	800195e <HAL_DSI_DeInit+0x8c>
	...

08001968 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8001968:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800196a:	7c03      	ldrb	r3, [r0, #16]
 800196c:	2b01      	cmp	r3, #1
 800196e:	f000 80ee 	beq.w	8001b4e <HAL_DSI_ConfigVideoMode+0x1e6>
 8001972:	2301      	movs	r3, #1
 8001974:	7403      	strb	r3, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8001976:	6803      	ldr	r3, [r0, #0]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8001978:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800197a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800197c:	68cd      	ldr	r5, [r1, #12]
  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800197e:	4e75      	ldr	r6, [pc, #468]	; (8001b54 <HAL_DSI_ConfigVideoMode+0x1ec>)
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8001986:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8001992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001994:	f022 0203 	bic.w	r2, r2, #3
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800199a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800199c:	432a      	orrs	r2, r5
 800199e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80019a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80019a2:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80019a4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80019a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80019ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b0:	432a      	orrs	r2, r5
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80019b4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80019b6:	694a      	ldr	r2, [r1, #20]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80019b8:	4035      	ands	r5, r6
 80019ba:	641d      	str	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80019bc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80019be:	4315      	orrs	r5, r2
 80019c0:	641d      	str	r5, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80019c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80019c4:	698d      	ldr	r5, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80019c6:	4032      	ands	r2, r6
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80019ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019cc:	432a      	orrs	r2, r5
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80019d0:	68da      	ldr	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80019d2:	680d      	ldr	r5, [r1, #0]
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80019d4:	f022 0203 	bic.w	r2, r2, #3
 80019d8:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	432a      	orrs	r2, r5
 80019de:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	f022 0207 	bic.w	r2, r2, #7
 80019e6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80019e8:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
 80019ec:	4332      	orrs	r2, r6
 80019ee:	69ce      	ldr	r6, [r1, #28]
 80019f0:	695d      	ldr	r5, [r3, #20]
 80019f2:	4332      	orrs	r2, r6
 80019f4:	432a      	orrs	r2, r5
 80019f6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	f022 020f 	bic.w	r2, r2, #15
 80019fe:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	4322      	orrs	r2, r4
 8001a04:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8001a06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001a0a:	f022 020e 	bic.w	r2, r2, #14
 8001a0e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8001a12:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8001a16:	2c03      	cmp	r4, #3
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8001a18:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8001a1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8001a20:	d107      	bne.n	8001a32 <HAL_DSI_ConfigVideoMode+0xca>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8001a22:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8001a24:	688c      	ldr	r4, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8001a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2a:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	4322      	orrs	r2, r4
 8001a30:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8001a32:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001a34:	4d48      	ldr	r5, [pc, #288]	; (8001b58 <HAL_DSI_ConfigVideoMode+0x1f0>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8001a36:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8001a38:	402c      	ands	r4, r5
 8001a3a:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8001a3c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001a3e:	4314      	orrs	r4, r2
 8001a40:	649c      	str	r4, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8001a44:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8001a46:	402a      	ands	r2, r5
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8001a4c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8001a4e:	4322      	orrs	r2, r4
 8001a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8001a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8001a54:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8001a56:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001a5a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001a5e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8001a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a62:	4322      	orrs	r2, r4
 8001a64:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8001a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a68:	4c3c      	ldr	r4, [pc, #240]	; (8001b5c <HAL_DSI_ConfigVideoMode+0x1f4>)
 8001a6a:	4022      	ands	r2, r4
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8001a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a70:	432a      	orrs	r2, r5
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8001a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8001a76:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8001a78:	4022      	ands	r2, r4
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8001a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a7e:	432a      	orrs	r2, r5
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8001a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a84:	4022      	ands	r2, r4
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8001a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a8a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8001a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a92:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001a96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8001a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a9e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001aa0:	4322      	orrs	r2, r4
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8001aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8001aa6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8001aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8001aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8001ab4:	699a      	ldr	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8001ab6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8001ab8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001abc:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001ac4:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8001ac6:	699a      	ldr	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8001ac8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8001aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ace:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8001ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8001ad8:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8001ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ade:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8001ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae2:	4322      	orrs	r2, r4
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8001ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8001ae8:	6d4c      	ldr	r4, [r1, #84]	; 0x54
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8001aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8001af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af2:	4322      	orrs	r2, r4
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8001af8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8001b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b02:	4322      	orrs	r2, r4
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8001b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8001b08:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8001b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b12:	4322      	orrs	r2, r4
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8001b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8001b18:	6e0c      	ldr	r4, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8001b1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8001b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b22:	4322      	orrs	r2, r4
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8001b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8001b28:	6e4c      	ldr	r4, [r1, #100]	; 0x64

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8001b2a:	6e89      	ldr	r1, [r1, #104]	; 0x68
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8001b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b34:	4322      	orrs	r2, r4
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8001b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8001b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b42:	430a      	orrs	r2, r1
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001b46:	2300      	movs	r3, #0
 8001b48:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8001b4a:	4618      	mov	r0, r3
}
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8001b4e:	2002      	movs	r0, #2
 8001b50:	e7fc      	b.n	8001b4c <HAL_DSI_ConfigVideoMode+0x1e4>
 8001b52:	bf00      	nop
 8001b54:	ffffe000 	.word	0xffffe000
 8001b58:	fffff000 	.word	0xfffff000
 8001b5c:	fffffc00 	.word	0xfffffc00

08001b60 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8001b60:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001b62:	7c03      	ldrb	r3, [r0, #16]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d035      	beq.n	8001bd4 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001b68:	e9d1 2400 	ldrd	r2, r4, [r1]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001b6c:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001b6e:	4294      	cmp	r4, r2
 8001b70:	bf38      	it	cc
 8001b72:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001b74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b78:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8001b7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8001b80:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001b88:	4322      	orrs	r2, r4
 8001b8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8001b8e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b92:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8001b9a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8001b9e:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001ba0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001ba4:	690d      	ldr	r5, [r1, #16]
 8001ba6:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8001baa:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001bac:	432a      	orrs	r2, r5
 8001bae:	4322      	orrs	r2, r4
 8001bb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8001bb4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001bb8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001bbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8001bc0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001bc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8001bd0:	4618      	mov	r0, r3
}
 8001bd2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	e7fc      	b.n	8001bd2 <HAL_DSI_ConfigPhyTimer+0x72>

08001bd8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001bd8:	7c03      	ldrb	r3, [r0, #16]
 8001bda:	2b01      	cmp	r3, #1
{
 8001bdc:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8001bde:	d01c      	beq.n	8001c1a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	6851      	ldr	r1, [r2, #4]
 8001be8:	f041 0101 	orr.w	r1, r1, #1
 8001bec:	6051      	str	r1, [r2, #4]
 8001bee:	6851      	ldr	r1, [r2, #4]
 8001bf0:	f001 0101 	and.w	r1, r1, #1
 8001bf4:	9100      	str	r1, [sp, #0]
 8001bf6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8001bfe:	f041 0108 	orr.w	r1, r1, #8
 8001c02:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8001c06:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001c0a:	7403      	strb	r3, [r0, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001c0c:	f002 0208 	and.w	r2, r2, #8
 8001c10:	9201      	str	r2, [sp, #4]
 8001c12:	9a01      	ldr	r2, [sp, #4]

  return HAL_OK;
 8001c14:	4618      	mov	r0, r3
}
 8001c16:	b002      	add	sp, #8
 8001c18:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	e7fb      	b.n	8001c16 <HAL_DSI_Start+0x3e>

08001c1e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8001c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001c20:	7c05      	ldrb	r5, [r0, #16]
 8001c22:	2d01      	cmp	r5, #1
{
 8001c24:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8001c26:	d009      	beq.n	8001c3c <HAL_DSI_ShortWrite+0x1e>
 8001c28:	2501      	movs	r5, #1
 8001c2a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8001c2c:	9d06      	ldr	r5, [sp, #24]
 8001c2e:	9500      	str	r5, [sp, #0]
 8001c30:	f7ff fd78 	bl	8001724 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001c34:	2300      	movs	r3, #0
 8001c36:	7423      	strb	r3, [r4, #16]

  return status;
}
 8001c38:	b003      	add	sp, #12
 8001c3a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	e7fb      	b.n	8001c38 <HAL_DSI_ShortWrite+0x1a>

08001c40 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8001c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001c46:	7c03      	ldrb	r3, [r0, #16]
 8001c48:	2b01      	cmp	r3, #1
{
 8001c4a:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 8001c4e:	4606      	mov	r6, r0
 8001c50:	460f      	mov	r7, r1
 8001c52:	4615      	mov	r5, r2
  __HAL_LOCK(hdsi);
 8001c54:	d053      	beq.n	8001cfe <HAL_DSI_LongWrite+0xbe>
 8001c56:	2301      	movs	r3, #1
 8001c58:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5a:	f7ff fad5 	bl	8001208 <HAL_GetTick>
 8001c5e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001c60:	6831      	ldr	r1, [r6, #0]
 8001c62:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001c64:	f013 0a01 	ands.w	sl, r3, #1
 8001c68:	d01a      	beq.n	8001ca0 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001c6a:	2c03      	cmp	r4, #3
 8001c6c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8001c6e:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001c72:	bf28      	it	cs
 8001c74:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8001c76:	4282      	cmp	r2, r0
 8001c78:	d11e      	bne.n	8001cb8 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8001c7a:	1aa3      	subs	r3, r4, r2
  hdsi->Instance->GPDR = fifoword;
 8001c7c:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  pparams += nbBytes;
 8001c80:	4442      	add	r2, r8
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8001c82:	bb1b      	cbnz	r3, 8001ccc <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8001c84:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8001c86:	0222      	lsls	r2, r4, #8
 8001c88:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	0224      	lsls	r4, r4, #8
 8001c90:	4315      	orrs	r5, r2
 8001c92:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8001c96:	432c      	orrs	r4, r5
 8001c98:	66cc      	str	r4, [r1, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8001c9a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8001c9c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8001c9e:	e009      	b.n	8001cb4 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fab2 	bl	8001208 <HAL_GetTick>
 8001ca4:	eba0 000b 	sub.w	r0, r0, fp
 8001ca8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cac:	d9d8      	bls.n	8001c60 <HAL_DSI_LongWrite+0x20>
      __HAL_UNLOCK(hdsi);
 8001cae:	f886 a010 	strb.w	sl, [r6, #16]
      return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
}
 8001cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8001cb8:	f818 3002 	ldrb.w	r3, [r8, r2]
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001cc2:	fa03 f30c 	lsl.w	r3, r3, ip
 8001cc6:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8001cca:	e7d4      	b.n	8001c76 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8001ccc:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8001cce:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8001cd2:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8001cd4:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8001cd6:	bf28      	it	cs
 8001cd8:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8001cdc:	f812 8000 	ldrb.w	r8, [r2, r0]
 8001ce0:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8001ce4:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8001ce6:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8001cea:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8001cec:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8001cf0:	d1f4      	bne.n	8001cdc <HAL_DSI_LongWrite+0x9c>
    hdsi->Instance->GPDR = fifoword;
 8001cf2:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    uicounter -= nbBytes;
 8001cf6:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8001cfa:	4472      	add	r2, lr
 8001cfc:	e7c1      	b.n	8001c82 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8001cfe:	2002      	movs	r0, #2
 8001d00:	e7d8      	b.n	8001cb4 <HAL_DSI_LongWrite+0x74>
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001ecc <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0c:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d10:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001d12:	2401      	movs	r4, #1
 8001d14:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001d1a:	43ac      	bics	r4, r5
 8001d1c:	f040 80b9 	bne.w	8001e92 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d20:	684d      	ldr	r5, [r1, #4]
 8001d22:	f005 0403 	and.w	r4, r5, #3
 8001d26:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2e:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d34:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d38:	d834      	bhi.n	8001da4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001d3a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d40:	68cf      	ldr	r7, [r1, #12]
 8001d42:	fa07 f708 	lsl.w	r7, r7, r8
 8001d46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d4a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d4c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d52:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001d56:	409f      	lsls	r7, r3
 8001d58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d5c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d5e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d60:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	688f      	ldr	r7, [r1, #8]
 8001d66:	fa07 f708 	lsl.w	r7, r7, r8
 8001d6a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001d70:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	d119      	bne.n	8001da8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001d78:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001d80:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d84:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d88:	f04f 0e0f 	mov.w	lr, #15
 8001d8c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d90:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	690f      	ldr	r7, [r1, #16]
 8001d96:	fa07 f70b 	lsl.w	r7, r7, fp
 8001d9a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	f8ca 7020 	str.w	r7, [sl, #32]
 8001da2:	e001      	b.n	8001da8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	2c03      	cmp	r4, #3
 8001da6:	d1da      	bne.n	8001d5e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001da8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001daa:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001db6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db8:	d06b      	beq.n	8001e92 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	f04f 0a00 	mov.w	sl, #0
 8001dbe:	f8cd a004 	str.w	sl, [sp, #4]
 8001dc2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	4c40      	ldr	r4, [pc, #256]	; (8001ec8 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001dcc:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001dd0:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001dd4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001dd8:	9601      	str	r6, [sp, #4]
 8001dda:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ddc:	f023 0603 	bic.w	r6, r3, #3
 8001de0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001de4:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dec:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001df4:	270f      	movs	r7, #15
 8001df6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e00:	d04e      	beq.n	8001ea0 <HAL_GPIO_Init+0x19c>
 8001e02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e06:	42a0      	cmp	r0, r4
 8001e08:	d04c      	beq.n	8001ea4 <HAL_GPIO_Init+0x1a0>
 8001e0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e0e:	42a0      	cmp	r0, r4
 8001e10:	d04a      	beq.n	8001ea8 <HAL_GPIO_Init+0x1a4>
 8001e12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e16:	42a0      	cmp	r0, r4
 8001e18:	d048      	beq.n	8001eac <HAL_GPIO_Init+0x1a8>
 8001e1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e1e:	42a0      	cmp	r0, r4
 8001e20:	d046      	beq.n	8001eb0 <HAL_GPIO_Init+0x1ac>
 8001e22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e26:	42a0      	cmp	r0, r4
 8001e28:	d044      	beq.n	8001eb4 <HAL_GPIO_Init+0x1b0>
 8001e2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e2e:	42a0      	cmp	r0, r4
 8001e30:	d042      	beq.n	8001eb8 <HAL_GPIO_Init+0x1b4>
 8001e32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	d040      	beq.n	8001ebc <HAL_GPIO_Init+0x1b8>
 8001e3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e3e:	42a0      	cmp	r0, r4
 8001e40:	d03e      	beq.n	8001ec0 <HAL_GPIO_Init+0x1bc>
 8001e42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e46:	42a0      	cmp	r0, r4
 8001e48:	bf0c      	ite	eq
 8001e4a:	2409      	moveq	r4, #9
 8001e4c:	240a      	movne	r4, #10
 8001e4e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e52:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001e56:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	bf54      	ite	pl
 8001e60:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e62:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001e66:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	bf54      	ite	pl
 8001e6e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e70:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001e74:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e78:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	bf54      	ite	pl
 8001e7c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e7e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001e82:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e86:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001e88:	bf54      	ite	pl
 8001e8a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e8c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001e90:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	3301      	adds	r3, #1
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	f47f af3b 	bne.w	8001d10 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001e9a:	b003      	add	sp, #12
 8001e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea0:	4654      	mov	r4, sl
 8001ea2:	e7d4      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001ea4:	2401      	movs	r4, #1
 8001ea6:	e7d2      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001ea8:	2402      	movs	r4, #2
 8001eaa:	e7d0      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001eac:	2403      	movs	r4, #3
 8001eae:	e7ce      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001eb0:	2404      	movs	r4, #4
 8001eb2:	e7cc      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001eb4:	2405      	movs	r4, #5
 8001eb6:	e7ca      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001eb8:	2406      	movs	r4, #6
 8001eba:	e7c8      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001ebc:	2407      	movs	r4, #7
 8001ebe:	e7c6      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001ec0:	2408      	movs	r4, #8
 8001ec2:	e7c4      	b.n	8001e4e <HAL_GPIO_Init+0x14a>
 8001ec4:	40013c00 	.word	0x40013c00
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	b10a      	cbz	r2, 8001ed6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed2:	6181      	str	r1, [r0, #24]
  }
}
 8001ed4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	e7fb      	b.n	8001ed2 <HAL_GPIO_WritePin+0x2>

08001eda <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001eda:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001edc:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001ee0:	01d2      	lsls	r2, r2, #7
 8001ee2:	3284      	adds	r2, #132	; 0x84
 8001ee4:	1883      	adds	r3, r0, r2
{
 8001ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001eea:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001eec:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001eee:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001ef0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001ef4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8001ef8:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001efa:	68c5      	ldr	r5, [r0, #12]
 8001efc:	f10c 0701 	add.w	r7, ip, #1
 8001f00:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001f04:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f08:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001f0a:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f0c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001f10:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001f12:	68c5      	ldr	r5, [r0, #12]
 8001f14:	68ce      	ldr	r6, [r1, #12]
 8001f16:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8001f1a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001f1c:	689d      	ldr	r5, [r3, #8]
 8001f1e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8001f22:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001f24:	68c7      	ldr	r7, [r0, #12]
 8001f26:	688d      	ldr	r5, [r1, #8]
 8001f28:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001f2c:	3501      	adds	r5, #1
 8001f2e:	443d      	add	r5, r7
 8001f30:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001f34:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001f36:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001f38:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001f3a:	f025 0507 	bic.w	r5, r5, #7
 8001f3e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001f40:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001f44:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001f46:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001f48:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001f4c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001f50:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001f54:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001f58:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001f5c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001f60:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8001f64:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001f66:	695d      	ldr	r5, [r3, #20]
 8001f68:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001f6c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f6e:	694d      	ldr	r5, [r1, #20]
 8001f70:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001f72:	69dd      	ldr	r5, [r3, #28]
 8001f74:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8001f78:	f025 0507 	bic.w	r5, r5, #7
 8001f7c:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001f7e:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8001f82:	433d      	orrs	r5, r7
 8001f84:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001f86:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001f88:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001f8a:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001f8e:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f90:	b31e      	cbz	r6, 8001fda <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001f92:	2e01      	cmp	r6, #1
 8001f94:	d023      	beq.n	8001fde <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001f96:	1eb5      	subs	r5, r6, #2
 8001f98:	2d02      	cmp	r5, #2
 8001f9a:	d922      	bls.n	8001fe2 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001f9c:	2e07      	cmp	r6, #7
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2502      	moveq	r5, #2
 8001fa2:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001fa4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001fa6:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8001faa:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001fac:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001fb0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001fb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001fb4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001fb6:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001fb8:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001fba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001fbe:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001fc0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001fc2:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8001fc6:	f024 0407 	bic.w	r4, r4, #7
 8001fca:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001fcc:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001fce:	5883      	ldr	r3, [r0, r2]
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	5083      	str	r3, [r0, r2]
}
 8001fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001fda:	2504      	movs	r5, #4
 8001fdc:	e7e2      	b.n	8001fa4 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001fde:	2503      	movs	r5, #3
 8001fe0:	e7e0      	b.n	8001fa4 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001fe2:	2502      	movs	r5, #2
 8001fe4:	e7de      	b.n	8001fa4 <LTDC_SetConfig+0xca>

08001fe6 <HAL_LTDC_MspInit>:
}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_LTDC_Init>:
{
 8001fe8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001fea:	4604      	mov	r4, r0
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d063      	beq.n	80020b8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001ff0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001ff4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ff8:	b91b      	cbnz	r3, 8002002 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001ffa:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001ffe:	f7ff fff2 	bl	8001fe6 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002010:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002012:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002016:	4302      	orrs	r2, r0
 8002018:	68e0      	ldr	r0, [r4, #12]
 800201a:	6999      	ldr	r1, [r3, #24]
 800201c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800201e:	6920      	ldr	r0, [r4, #16]
 8002020:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002022:	430a      	orrs	r2, r1
 8002024:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4924      	ldr	r1, [pc, #144]	; (80020bc <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800202a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800202c:	400a      	ands	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002036:	69a0      	ldr	r0, [r4, #24]
 8002038:	4302      	orrs	r2, r0
 800203a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800203c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800203e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002040:	400a      	ands	r2, r1
 8002042:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800204a:	6a20      	ldr	r0, [r4, #32]
 800204c:	4302      	orrs	r2, r0
 800204e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002050:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002052:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002054:	400a      	ands	r2, r1
 8002056:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800205e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002060:	4302      	orrs	r2, r0
 8002062:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	4011      	ands	r1, r2
 8002068:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800206a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800206c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800206e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002072:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002074:	430a      	orrs	r2, r1
 8002076:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800207a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800207e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002082:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8002086:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800208e:	430a      	orrs	r2, r1
 8002090:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002094:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800209a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209c:	f042 0206 	orr.w	r2, r2, #6
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80020aa:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80020ac:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80020ae:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80020b2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e7fc      	b.n	80020b6 <HAL_LTDC_Init+0xce>
 80020bc:	f000f800 	.word	0xf000f800

080020c0 <HAL_LTDC_ErrorCallback>:
 80020c0:	4770      	bx	lr

080020c2 <HAL_LTDC_LineEventCallback>:
 80020c2:	4770      	bx	lr

080020c4 <HAL_LTDC_ReloadEventCallback>:
 80020c4:	4770      	bx	lr

080020c6 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80020c6:	6803      	ldr	r3, [r0, #0]
{
 80020c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80020ca:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80020cc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80020ce:	0772      	lsls	r2, r6, #29
{
 80020d0:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80020d2:	d514      	bpl.n	80020fe <HAL_LTDC_IRQHandler+0x38>
 80020d4:	0769      	lsls	r1, r5, #29
 80020d6:	d512      	bpl.n	80020fe <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	f022 0204 	bic.w	r2, r2, #4
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80020e0:	2204      	movs	r2, #4
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80020e4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80020f0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80020f2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80020f6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80020fa:	f7ff ffe1 	bl	80020c0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80020fe:	07b2      	lsls	r2, r6, #30
 8002100:	d516      	bpl.n	8002130 <HAL_LTDC_IRQHandler+0x6a>
 8002102:	07ab      	lsls	r3, r5, #30
 8002104:	d514      	bpl.n	8002130 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	f022 0202 	bic.w	r2, r2, #2
 800210e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002110:	2202      	movs	r2, #2
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002114:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800211e:	2304      	movs	r3, #4
 8002120:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002124:	2300      	movs	r3, #0
 8002126:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff ffc8 	bl	80020c0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002130:	07f0      	lsls	r0, r6, #31
 8002132:	d510      	bpl.n	8002156 <HAL_LTDC_IRQHandler+0x90>
 8002134:	07e9      	lsls	r1, r5, #31
 8002136:	d50e      	bpl.n	8002156 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002142:	2201      	movs	r2, #1
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8002146:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8002148:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800214c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ffb6 	bl	80020c2 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002156:	0732      	lsls	r2, r6, #28
 8002158:	d511      	bpl.n	800217e <HAL_LTDC_IRQHandler+0xb8>
 800215a:	072b      	lsls	r3, r5, #28
 800215c:	d50f      	bpl.n	800217e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002168:	2208      	movs	r2, #8
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800216c:	2301      	movs	r3, #1
 800216e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002172:	2300      	movs	r3, #0
 8002174:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ffa3 	bl	80020c4 <HAL_LTDC_ReloadEventCallback>
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}

08002180 <HAL_LTDC_ConfigLayer>:
{
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8002184:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002188:	2b01      	cmp	r3, #1
{
 800218a:	4606      	mov	r6, r0
 800218c:	460f      	mov	r7, r1
 800218e:	4694      	mov	ip, r2
 8002190:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8002194:	d01f      	beq.n	80021d6 <HAL_LTDC_ConfigLayer+0x56>
 8002196:	f04f 0801 	mov.w	r8, #1
 800219a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800219e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80021a2:	2434      	movs	r4, #52	; 0x34
 80021a4:	460d      	mov	r5, r1
 80021a6:	fb04 6402 	mla	r4, r4, r2, r6
 80021aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ac:	3438      	adds	r4, #56	; 0x38
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021bc:	4630      	mov	r0, r6
 80021be:	4662      	mov	r2, ip
 80021c0:	4639      	mov	r1, r7
 80021c2:	f7ff fe8a 	bl	8001eda <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021c6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80021c8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021ca:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80021ce:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80021d2:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80021d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021da <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80021da:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf18      	it	ne
 80021e0:	f04f 5300 	movne.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80021e4:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80021e6:	6a0b      	ldr	r3, [r1, #32]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80021f0:	2300      	movne	r3, #0
 80021f2:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80021f4:	69cb      	ldr	r3, [r1, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 80021fe:	2300      	movne	r3, #0
 8002200:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8002202:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	6182      	str	r2, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8002208:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800220a:	4413      	add	r3, r2
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	6202      	str	r2, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8002210:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002212:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8002214:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8002216:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8002218:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800221a:	3a01      	subs	r2, #1
 800221c:	4413      	add	r3, r2
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800221e:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 8002220:	2000      	movs	r0, #0
 8002222:	4770      	bx	lr

08002224 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002224:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800222c:	4d18      	ldr	r5, [pc, #96]	; (8002290 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002230:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_PWREx_EnableOverDrive+0x70>)
 8002242:	2201      	movs	r2, #1
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002246:	f7fe ffdf 	bl	8001208 <HAL_GetTick>
 800224a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800224c:	686b      	ldr	r3, [r5, #4]
 800224e:	03da      	lsls	r2, r3, #15
 8002250:	d50b      	bpl.n	800226a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002254:	4d0e      	ldr	r5, [pc, #56]	; (8002290 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002256:	2201      	movs	r2, #1
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800225a:	f7fe ffd5 	bl	8001208 <HAL_GetTick>
 800225e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002260:	686b      	ldr	r3, [r5, #4]
 8002262:	039b      	lsls	r3, r3, #14
 8002264:	d50a      	bpl.n	800227c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002266:	2000      	movs	r0, #0
 8002268:	e006      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800226a:	f7fe ffcd 	bl	8001208 <HAL_GetTick>
 800226e:	1b00      	subs	r0, r0, r4
 8002270:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002274:	d9ea      	bls.n	800224c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
}
 8002278:	b003      	add	sp, #12
 800227a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800227c:	f7fe ffc4 	bl	8001208 <HAL_GetTick>
 8002280:	1b00      	subs	r0, r0, r4
 8002282:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002286:	d9eb      	bls.n	8002260 <HAL_PWREx_EnableOverDrive+0x3c>
 8002288:	e7f5      	b.n	8002276 <HAL_PWREx_EnableOverDrive+0x52>
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	420e0000 	.word	0x420e0000

08002298 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4913      	ldr	r1, [pc, #76]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800229a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229c:	688b      	ldr	r3, [r1, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d01c      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x48>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022aa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	bf14      	ite	ne
 80022b6:	480d      	ldrne	r0, [pc, #52]	; (80022ec <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b8:	480d      	ldreq	r0, [pc, #52]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022be:	bf18      	it	ne
 80022c0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	fba1 0100 	umull	r0, r1, r1, r0
 80022ca:	f7fd ff93 	bl	80001f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x50>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80022da:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022de:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <HAL_RCC_GetSysClockFreq+0x54>)
 80022e2:	e7fc      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80022e6:	e7fa      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x46>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	007a1200 	.word	0x007a1200
 80022f0:	00f42400 	.word	0x00f42400

080022f4 <HAL_RCC_ClockConfig>:
{
 80022f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022fa:	4604      	mov	r4, r0
 80022fc:	b910      	cbnz	r0, 8002304 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
}
 8002300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_ClockConfig+0x124>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f002 020f 	and.w	r2, r2, #15
 800230c:	428a      	cmp	r2, r1
 800230e:	d328      	bcc.n	8002362 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	0797      	lsls	r7, r2, #30
 8002314:	d42d      	bmi.n	8002372 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	07d0      	lsls	r0, r2, #31
 8002318:	d441      	bmi.n	800239e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_ClockConfig+0x124>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f002 020f 	and.w	r2, r2, #15
 8002322:	42aa      	cmp	r2, r5
 8002324:	d866      	bhi.n	80023f4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	6822      	ldr	r2, [r4, #0]
 8002328:	0751      	lsls	r1, r2, #29
 800232a:	d46c      	bmi.n	8002406 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	0713      	lsls	r3, r2, #28
 800232e:	d507      	bpl.n	8002340 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 8002332:	6921      	ldr	r1, [r4, #16]
 8002334:	6893      	ldr	r3, [r2, #8]
 8002336:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800233a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800233e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002340:	f7ff ffaa 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 8002346:	4a36      	ldr	r2, [pc, #216]	; (8002420 <HAL_RCC_ClockConfig+0x12c>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	40d8      	lsrs	r0, r3
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_ClockConfig+0x130>)
 8002354:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_ClockConfig+0x134>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	f7fe ff0d 	bl	8001178 <HAL_InitTick>
  return HAL_OK;
 800235e:	2000      	movs	r0, #0
 8002360:	e7ce      	b.n	8002300 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	428b      	cmp	r3, r1
 800236e:	d1c6      	bne.n	80022fe <HAL_RCC_ClockConfig+0xa>
 8002370:	e7ce      	b.n	8002310 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 8002374:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	bf1e      	ittt	ne
 800237a:	6899      	ldrne	r1, [r3, #8]
 800237c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002380:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	bf42      	ittt	mi
 8002386:	6899      	ldrmi	r1, [r3, #8]
 8002388:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800238c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238e:	4923      	ldr	r1, [pc, #140]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 8002390:	68a0      	ldr	r0, [r4, #8]
 8002392:	688b      	ldr	r3, [r1, #8]
 8002394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002398:	4303      	orrs	r3, r0
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e7bb      	b.n	8002316 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 80023a2:	2a01      	cmp	r2, #1
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	d0a7      	beq.n	80022fe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4e1b      	ldr	r6, [pc, #108]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 80023b0:	68b3      	ldr	r3, [r6, #8]
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80023ba:	f7fe ff25 	bl	8001208 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023be:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c4:	68b3      	ldr	r3, [r6, #8]
 80023c6:	6862      	ldr	r2, [r4, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023d0:	d0a3      	beq.n	800231a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe ff19 	bl	8001208 <HAL_GetTick>
 80023d6:	1bc0      	subs	r0, r0, r7
 80023d8:	4540      	cmp	r0, r8
 80023da:	d9f3      	bls.n	80023c4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80023dc:	2003      	movs	r0, #3
 80023de:	e78f      	b.n	8002300 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e0:	1e91      	subs	r1, r2, #2
 80023e2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	d802      	bhi.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023ec:	e7de      	b.n	80023ac <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	f013 0f02 	tst.w	r3, #2
 80023f2:	e7db      	b.n	80023ac <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f4:	b2ea      	uxtb	r2, r5
 80023f6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	42ab      	cmp	r3, r5
 8002400:	f47f af7d 	bne.w	80022fe <HAL_RCC_ClockConfig+0xa>
 8002404:	e78f      	b.n	8002326 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002406:	4905      	ldr	r1, [pc, #20]	; (800241c <HAL_RCC_ClockConfig+0x128>)
 8002408:	68e0      	ldr	r0, [r4, #12]
 800240a:	688b      	ldr	r3, [r1, #8]
 800240c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002410:	4303      	orrs	r3, r0
 8002412:	608b      	str	r3, [r1, #8]
 8002414:	e78a      	b.n	800232c <HAL_RCC_ClockConfig+0x38>
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	08006bc3 	.word	0x08006bc3
 8002424:	20000058 	.word	0x20000058
 8002428:	20000060 	.word	0x20000060

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800242e:	6802      	ldr	r2, [r0, #0]
{
 8002430:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002432:	0610      	lsls	r0, r2, #24
 8002434:	d508      	bpl.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002436:	49aa      	ldr	r1, [pc, #680]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002438:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800243a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800243e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002442:	4303      	orrs	r3, r0
 8002444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002448:	05d1      	lsls	r1, r2, #23
 800244a:	d508      	bpl.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800244c:	49a4      	ldr	r1, [pc, #656]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800244e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002450:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	4303      	orrs	r3, r0
 800245a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800245e:	f012 0f43 	tst.w	r2, #67	; 0x43
 8002462:	d173      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x120>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	f013 0f0c 	tst.w	r3, #12
 800246a:	f000 80c1 	beq.w	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800246e:	4b9d      	ldr	r3, [pc, #628]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002470:	4d9b      	ldr	r5, [pc, #620]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002472:	2200      	movs	r2, #0
 8002474:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8002476:	f7fe fec7 	bl	8001208 <HAL_GetTick>
 800247a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f100 80fc 	bmi.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x250>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002484:	6821      	ldr	r1, [r4, #0]
 8002486:	074f      	lsls	r7, r1, #29
 8002488:	d51a      	bpl.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800248a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800248e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8002492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002496:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800249a:	4313      	orrs	r3, r2
 800249c:	6922      	ldr	r2, [r4, #16]
 800249e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024a2:	69a2      	ldr	r2, [r4, #24]
 80024a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024a8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ac:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80024b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80024b6:	3a01      	subs	r2, #1
 80024b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024bc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024c0:	070e      	lsls	r6, r1, #28
 80024c2:	d519      	bpl.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80024c4:	4a86      	ldr	r2, [pc, #536]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80024c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ca:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80024ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80024d6:	4303      	orrs	r3, r0
 80024d8:	6920      	ldr	r0, [r4, #16]
 80024da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024de:	69e0      	ldr	r0, [r4, #28]
 80024e0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80024ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024f2:	4303      	orrs	r3, r0
 80024f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80024f8:	060d      	lsls	r5, r1, #24
 80024fa:	d517      	bpl.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80024fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002502:	d113      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002504:	4976      	ldr	r1, [pc, #472]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002506:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800250a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800250e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002512:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002516:	4313      	orrs	r3, r2
 8002518:	6922      	ldr	r2, [r4, #16]
 800251a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800251e:	6962      	ldr	r2, [r4, #20]
 8002520:	0852      	lsrs	r2, r2, #1
 8002522:	3a01      	subs	r2, #1
 8002524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800252c:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800252e:	4e6c      	ldr	r6, [pc, #432]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLSAI_ENABLE();
 8002530:	2201      	movs	r2, #1
 8002532:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8002534:	f7fe fe68 	bl	8001208 <HAL_GetTick>
 8002538:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800253a:	6833      	ldr	r3, [r6, #0]
 800253c:	0098      	lsls	r0, r3, #2
 800253e:	d459      	bmi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002540:	f7fe fe62 	bl	8001208 <HAL_GetTick>
 8002544:	1b40      	subs	r0, r0, r5
 8002546:	2802      	cmp	r0, #2
 8002548:	d9f7      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800254a:	e04e      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 800254c:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254e:	4e64      	ldr	r6, [pc, #400]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002550:	2200      	movs	r2, #0
 8002552:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002554:	f7fe fe58 	bl	8001208 <HAL_GetTick>
 8002558:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	d43f      	bmi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002560:	6821      	ldr	r1, [r4, #0]
 8002562:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002564:	bf41      	itttt	mi
 8002566:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 800256a:	071b      	lslmi	r3, r3, #28
 800256c:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8002570:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002574:	078e      	lsls	r6, r1, #30
 8002576:	d515      	bpl.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002578:	4a59      	ldr	r2, [pc, #356]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800257a:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800257c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002580:	6865      	ldr	r5, [r4, #4]
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002588:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800258c:	4303      	orrs	r3, r0
 800258e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002592:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8002596:	6a23      	ldr	r3, [r4, #32]
 8002598:	f020 001f 	bic.w	r0, r0, #31
 800259c:	3b01      	subs	r3, #1
 800259e:	4303      	orrs	r3, r0
 80025a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025a4:	064d      	lsls	r5, r1, #25
 80025a6:	d50a      	bpl.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025a8:	68e3      	ldr	r3, [r4, #12]
 80025aa:	6862      	ldr	r2, [r4, #4]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80025b2:	68a2      	ldr	r2, [r4, #8]
 80025b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80025b8:	4a49      	ldr	r2, [pc, #292]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80025ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025c0:	4e47      	ldr	r6, [pc, #284]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLI2S_ENABLE();
 80025c2:	2201      	movs	r2, #1
 80025c4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80025c6:	f7fe fe1f 	bl	8001208 <HAL_GetTick>
 80025ca:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025cc:	6833      	ldr	r3, [r6, #0]
 80025ce:	0118      	lsls	r0, r3, #4
 80025d0:	f53f af48 	bmi.w	8002464 <HAL_RCCEx_PeriphCLKConfig+0x38>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025d4:	f7fe fe18 	bl	8001208 <HAL_GetTick>
 80025d8:	1b40      	subs	r0, r0, r5
 80025da:	2802      	cmp	r0, #2
 80025dc:	d9f6      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80025de:	e004      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025e0:	f7fe fe12 	bl	8001208 <HAL_GetTick>
 80025e4:	1b40      	subs	r0, r0, r5
 80025e6:	2802      	cmp	r0, #2
 80025e8:	d9b7      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x12e>
        return HAL_TIMEOUT;
 80025ea:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 80025ec:	b003      	add	sp, #12
 80025ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80025f0:	0619      	lsls	r1, r3, #24
 80025f2:	d43e      	bmi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x246>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	069a      	lsls	r2, r3, #26
 80025f8:	d530      	bpl.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x230>
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    PWR->CR |= PWR_CR_DBP;
 8002600:	4d39      	ldr	r5, [pc, #228]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800261c:	f7fe fdf4 	bl	8001208 <HAL_GetTick>
 8002620:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	05d9      	lsls	r1, r3, #23
 8002626:	d530      	bpl.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002628:	4d2d      	ldr	r5, [pc, #180]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800262a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002630:	d131      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002634:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002638:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800263e:	d14b      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002640:	6891      	ldr	r1, [r2, #8]
 8002642:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002646:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800264a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800264e:	4301      	orrs	r1, r0
 8002650:	6091      	str	r1, [r2, #8]
 8002652:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	430b      	orrs	r3, r1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800265c:	6820      	ldr	r0, [r4, #0]
 800265e:	f010 0010 	ands.w	r0, r0, #16
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002662:	bf1f      	itttt	ne
 8002664:	4b21      	ldrne	r3, [pc, #132]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002666:	f894 2030 	ldrbne.w	r2, [r4, #48]	; 0x30
 800266a:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  return HAL_OK;
 800266e:	2000      	movne	r0, #0
 8002670:	e7bc      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8002672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002678:	d1bc      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800267a:	e6f8      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800267c:	f7fe fdc4 	bl	8001208 <HAL_GetTick>
 8002680:	1b80      	subs	r0, r0, r6
 8002682:	2802      	cmp	r0, #2
 8002684:	f67f aefa 	bls.w	800247c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002688:	e7af      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe fdbd 	bl	8001208 <HAL_GetTick>
 800268e:	1b80      	subs	r0, r0, r6
 8002690:	2802      	cmp	r0, #2
 8002692:	d9c6      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002694:	e7a9      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002696:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002698:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800269c:	4293      	cmp	r3, r2
 800269e:	d0c8      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x206>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ae:	2100      	movs	r1, #0
 80026b0:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80026b4:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026b8:	07da      	lsls	r2, r3, #31
 80026ba:	d5ba      	bpl.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x206>
        tickstart = HAL_GetTick();
 80026bc:	f7fe fda4 	bl	8001208 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80026c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026c8:	079b      	lsls	r3, r3, #30
 80026ca:	d4b2      	bmi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x206>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe fd9c 	bl	8001208 <HAL_GetTick>
 80026d0:	1b80      	subs	r0, r0, r6
 80026d2:	42b8      	cmp	r0, r7
 80026d4:	d9f7      	bls.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80026d6:	e788      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d8:	6891      	ldr	r1, [r2, #8]
 80026da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80026de:	e7b7      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	40007000 	.word	0x40007000
 80026ec:	42471000 	.word	0x42471000

080026f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f4:	4604      	mov	r4, r0
 80026f6:	b340      	cbz	r0, 800274a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f8:	6803      	ldr	r3, [r0, #0]
 80026fa:	07dd      	lsls	r5, r3, #31
 80026fc:	d410      	bmi.n	8002720 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	0798      	lsls	r0, r3, #30
 8002702:	d45e      	bmi.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	071a      	lsls	r2, r3, #28
 8002708:	f100 80a0 	bmi.w	800284c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	075b      	lsls	r3, r3, #29
 8002710:	f100 80c0 	bmi.w	8002894 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	69a0      	ldr	r0, [r4, #24]
 8002716:	2800      	cmp	r0, #0
 8002718:	f040 8128 	bne.w	800296c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800271c:	2000      	movs	r0, #0
 800271e:	e02b      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002720:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	f002 020c 	and.w	r2, r2, #12
 8002728:	2a04      	cmp	r2, #4
 800272a:	d007      	beq.n	800273c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002732:	2a08      	cmp	r2, #8
 8002734:	d10b      	bne.n	800274e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	0251      	lsls	r1, r2, #9
 800273a:	d508      	bpl.n	800274e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	039a      	lsls	r2, r3, #14
 8002742:	d5dc      	bpl.n	80026fe <HAL_RCC_OscConfig+0xe>
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1d9      	bne.n	80026fe <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274e:	6862      	ldr	r2, [r4, #4]
 8002750:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002754:	d113      	bne.n	800277e <HAL_RCC_OscConfig+0x8e>
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800275c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800275e:	f7fe fd53 	bl	8001208 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4e7f      	ldr	r6, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002764:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	6833      	ldr	r3, [r6, #0]
 8002768:	039b      	lsls	r3, r3, #14
 800276a:	d4c8      	bmi.n	80026fe <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fd4c 	bl	8001208 <HAL_GetTick>
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	2864      	cmp	r0, #100	; 0x64
 8002774:	d9f7      	bls.n	8002766 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002776:	2003      	movs	r0, #3
}
 8002778:	b002      	add	sp, #8
 800277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277e:	4d78      	ldr	r5, [pc, #480]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002780:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0xa8>
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	602b      	str	r3, [r5, #0]
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002796:	e7e2      	b.n	800275e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	602b      	str	r3, [r5, #0]
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	d1d9      	bne.n	800275e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80027aa:	f7fe fd2d 	bl	8001208 <HAL_GetTick>
 80027ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	039f      	lsls	r7, r3, #14
 80027b4:	d5a3      	bpl.n	80026fe <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fd27 	bl	8001208 <HAL_GetTick>
 80027ba:	1b80      	subs	r0, r0, r6
 80027bc:	2864      	cmp	r0, #100	; 0x64
 80027be:	d9f7      	bls.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027c0:	e7d9      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	f012 0f0c 	tst.w	r2, #12
 80027ca:	d007      	beq.n	80027dc <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027d2:	2a08      	cmp	r2, #8
 80027d4:	d111      	bne.n	80027fa <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	025e      	lsls	r6, r3, #9
 80027da:	d40e      	bmi.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	079d      	lsls	r5, r3, #30
 80027e2:	d502      	bpl.n	80027ea <HAL_RCC_OscConfig+0xfa>
 80027e4:	68e3      	ldr	r3, [r4, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d1af      	bne.n	800274a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	6813      	ldr	r3, [r2, #0]
 80027ec:	6921      	ldr	r1, [r4, #16]
 80027ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027f6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f8:	e784      	b.n	8002704 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027fa:	68e2      	ldr	r2, [r4, #12]
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027fe:	b1b2      	cbz	r2, 800282e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002804:	f7fe fd00 	bl	8001208 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4d55      	ldr	r5, [pc, #340]	; (8002960 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800280a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	682b      	ldr	r3, [r5, #0]
 800280e:	0798      	lsls	r0, r3, #30
 8002810:	d507      	bpl.n	8002822 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	6922      	ldr	r2, [r4, #16]
 8002816:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800281a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800281e:	602b      	str	r3, [r5, #0]
 8002820:	e770      	b.n	8002704 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fcf1 	bl	8001208 <HAL_GetTick>
 8002826:	1b80      	subs	r0, r0, r6
 8002828:	2802      	cmp	r0, #2
 800282a:	d9ef      	bls.n	800280c <HAL_RCC_OscConfig+0x11c>
 800282c:	e7a3      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800282e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002830:	f7fe fcea 	bl	8001208 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002834:	4e4a      	ldr	r6, [pc, #296]	; (8002960 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002836:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002838:	6833      	ldr	r3, [r6, #0]
 800283a:	0799      	lsls	r1, r3, #30
 800283c:	f57f af62 	bpl.w	8002704 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe fce2 	bl	8001208 <HAL_GetTick>
 8002844:	1b40      	subs	r0, r0, r5
 8002846:	2802      	cmp	r0, #2
 8002848:	d9f6      	bls.n	8002838 <HAL_RCC_OscConfig+0x148>
 800284a:	e794      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800284c:	6962      	ldr	r2, [r4, #20]
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002850:	b182      	cbz	r2, 8002874 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002852:	2201      	movs	r2, #1
 8002854:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002858:	f7fe fcd6 	bl	8001208 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285c:	4e40      	ldr	r6, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800285e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002860:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002862:	079f      	lsls	r7, r3, #30
 8002864:	f53f af52 	bmi.w	800270c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe fcce 	bl	8001208 <HAL_GetTick>
 800286c:	1b40      	subs	r0, r0, r5
 800286e:	2802      	cmp	r0, #2
 8002870:	d9f6      	bls.n	8002860 <HAL_RCC_OscConfig+0x170>
 8002872:	e780      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002874:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002878:	f7fe fcc6 	bl	8001208 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4e38      	ldr	r6, [pc, #224]	; (8002960 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800287e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002882:	0798      	lsls	r0, r3, #30
 8002884:	f57f af42 	bpl.w	800270c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fcbe 	bl	8001208 <HAL_GetTick>
 800288c:	1b40      	subs	r0, r0, r5
 800288e:	2802      	cmp	r0, #2
 8002890:	d9f6      	bls.n	8002880 <HAL_RCC_OscConfig+0x190>
 8002892:	e770      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800289c:	d128      	bne.n	80028f0 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	9201      	str	r2, [sp, #4]
 80028a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028b2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4d2c      	ldr	r5, [pc, #176]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	05d9      	lsls	r1, r3, #23
 80028ba:	d51b      	bpl.n	80028f4 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	68a3      	ldr	r3, [r4, #8]
 80028be:	4d28      	ldr	r5, [pc, #160]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d127      	bne.n	8002914 <HAL_RCC_OscConfig+0x224>
 80028c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80028cc:	f7fe fc9c 	bl	8001208 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4e23      	ldr	r6, [pc, #140]	; (8002960 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80028d2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80028da:	079b      	lsls	r3, r3, #30
 80028dc:	d539      	bpl.n	8002952 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80028de:	2f00      	cmp	r7, #0
 80028e0:	f43f af18 	beq.w	8002714 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	e711      	b.n	8002714 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80028f0:	2700      	movs	r7, #0
 80028f2:	e7df      	b.n	80028b4 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028fc:	f7fe fc84 	bl	8001208 <HAL_GetTick>
 8002900:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	05da      	lsls	r2, r3, #23
 8002906:	d4d9      	bmi.n	80028bc <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fc7e 	bl	8001208 <HAL_GetTick>
 800290c:	1b80      	subs	r0, r0, r6
 800290e:	2802      	cmp	r0, #2
 8002910:	d9f7      	bls.n	8002902 <HAL_RCC_OscConfig+0x212>
 8002912:	e730      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	2b05      	cmp	r3, #5
 8002916:	d104      	bne.n	8002922 <HAL_RCC_OscConfig+0x232>
 8002918:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	672b      	str	r3, [r5, #112]	; 0x70
 8002920:	e7d0      	b.n	80028c4 <HAL_RCC_OscConfig+0x1d4>
 8002922:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	672a      	str	r2, [r5, #112]	; 0x70
 800292a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800292c:	f022 0204 	bic.w	r2, r2, #4
 8002930:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ca      	bne.n	80028cc <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8002936:	f7fe fc67 	bl	8001208 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800293e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002942:	0798      	lsls	r0, r3, #30
 8002944:	d5cb      	bpl.n	80028de <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fc5f 	bl	8001208 <HAL_GetTick>
 800294a:	1b80      	subs	r0, r0, r6
 800294c:	4540      	cmp	r0, r8
 800294e:	d9f7      	bls.n	8002940 <HAL_RCC_OscConfig+0x250>
 8002950:	e711      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fc59 	bl	8001208 <HAL_GetTick>
 8002956:	1b40      	subs	r0, r0, r5
 8002958:	4540      	cmp	r0, r8
 800295a:	d9bd      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1e8>
 800295c:	e70b      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296c:	4d3b      	ldr	r5, [pc, #236]	; (8002a5c <HAL_RCC_OscConfig+0x36c>)
 800296e:	68ab      	ldr	r3, [r5, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d040      	beq.n	80029fa <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_OscConfig+0x370>)
 800297a:	2200      	movs	r2, #0
 800297c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800297e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002980:	d12e      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 8002982:	f7fe fc41 	bl	8001208 <HAL_GetTick>
 8002986:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	0199      	lsls	r1, r3, #6
 800298c:	d422      	bmi.n	80029d4 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002996:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800299a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800299c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80029a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	3a01      	subs	r2, #1
 80029ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029b0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4d29      	ldr	r5, [pc, #164]	; (8002a5c <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_PLL_ENABLE();
 80029b6:	2201      	movs	r2, #1
 80029b8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029ba:	f7fe fc25 	bl	8001208 <HAL_GetTick>
 80029be:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	019a      	lsls	r2, r3, #6
 80029c4:	f53f aeaa 	bmi.w	800271c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fc1e 	bl	8001208 <HAL_GetTick>
 80029cc:	1b00      	subs	r0, r0, r4
 80029ce:	2802      	cmp	r0, #2
 80029d0:	d9f6      	bls.n	80029c0 <HAL_RCC_OscConfig+0x2d0>
 80029d2:	e6d0      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fc18 	bl	8001208 <HAL_GetTick>
 80029d8:	1b80      	subs	r0, r0, r6
 80029da:	2802      	cmp	r0, #2
 80029dc:	d9d4      	bls.n	8002988 <HAL_RCC_OscConfig+0x298>
 80029de:	e6ca      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80029e0:	f7fe fc12 	bl	8001208 <HAL_GetTick>
 80029e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	f57f ae97 	bpl.w	800271c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fc0b 	bl	8001208 <HAL_GetTick>
 80029f2:	1b00      	subs	r0, r0, r4
 80029f4:	2802      	cmp	r0, #2
 80029f6:	d9f6      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2f6>
 80029f8:	e6bd      	b.n	8002776 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fa:	2801      	cmp	r0, #1
 80029fc:	f43f aebc 	beq.w	8002778 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002a00:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a02:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a04:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a08:	4291      	cmp	r1, r2
 8002a0a:	f47f ae9e 	bne.w	800274a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	428a      	cmp	r2, r1
 8002a16:	f47f ae98 	bne.w	800274a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002a20:	401a      	ands	r2, r3
 8002a22:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002a26:	f47f ae90 	bne.w	800274a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002a32:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a34:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002a38:	f47f ae87 	bne.w	800274a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a42:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002a46:	f47f ae80 	bne.w	800274a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a4c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a50:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002a54:	f43f ae62 	beq.w	800271c <HAL_RCC_OscConfig+0x2c>
 8002a58:	e677      	b.n	800274a <HAL_RCC_OscConfig+0x5a>
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	42470000 	.word	0x42470000

08002a64 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002a64:	4770      	bx	lr

08002a66 <HAL_SDRAM_Init>:
{
 8002a66:	b538      	push	{r3, r4, r5, lr}
 8002a68:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	b1c8      	cbz	r0, 8002aa2 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002a6e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002a72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a76:	b91b      	cbnz	r3, 8002a80 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8002a78:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002a7c:	f7ff fff2 	bl	8002a64 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002a86:	1d21      	adds	r1, r4, #4
 8002a88:	6820      	ldr	r0, [r4, #0]
 8002a8a:	f000 f842 	bl	8002b12 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002a8e:	6862      	ldr	r2, [r4, #4]
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	4629      	mov	r1, r5
 8002a94:	f000 f878 	bl	8002b88 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8002a9e:	2000      	movs	r0, #0
}
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e7fc      	b.n	8002aa0 <HAL_SDRAM_Init+0x3a>

08002aa6 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8002aa6:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002aa8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002aac:	2b02      	cmp	r3, #2
{
 8002aae:	4605      	mov	r5, r0
 8002ab0:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002ab2:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8002ab4:	d012      	beq.n	8002adc <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8002ab6:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8002aba:	2c01      	cmp	r4, #1
 8002abc:	d10f      	bne.n	8002ade <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002ac4:	6828      	ldr	r0, [r5, #0]
 8002ac6:	f000 f895 	bl	8002bf4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002aca:	6833      	ldr	r3, [r6, #0]
 8002acc:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002ace:	bf06      	itte	eq
 8002ad0:	2305      	moveq	r3, #5
 8002ad2:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002ad6:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002ada:	2000      	movs	r0, #0
}
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
 8002ae0:	e7fc      	b.n	8002adc <HAL_SDRAM_SendCommand+0x36>

08002ae2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002ae2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002ae4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002ae8:	2b02      	cmp	r3, #2
{
 8002aea:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002aec:	b2d8      	uxtb	r0, r3
 8002aee:	d00d      	beq.n	8002b0c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002af0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	b2dd      	uxtb	r5, r3
 8002af8:	d109      	bne.n	8002b0e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002afa:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002afc:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002afe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002b02:	f000 f89d 	bl	8002c40 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002b06:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002b0a:	2000      	movs	r0, #0
}
 8002b0c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e7fc      	b.n	8002b0c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002b12 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002b16:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002b1a:	680a      	ldr	r2, [r1, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002b1c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8002b20:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8002b24:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8002b28:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8002b2c:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002b2e:	b9a2      	cbnz	r2, 8002b5a <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002b30:	ea43 0209 	orr.w	r2, r3, r9
 8002b34:	432a      	orrs	r2, r5
 8002b36:	ea42 0308 	orr.w	r3, r2, r8
 8002b3a:	6801      	ldr	r1, [r0, #0]
 8002b3c:	ea43 030e 	orr.w	r3, r3, lr
 8002b40:	ea43 030c 	orr.w	r3, r3, ip
 8002b44:	433b      	orrs	r3, r7
 8002b46:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002b4a:	4333      	orrs	r3, r6
 8002b4c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8002b54:	2000      	movs	r0, #0
 8002b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	ea43 0309 	orr.w	r3, r3, r9
 8002b60:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b64:	4313      	orrs	r3, r2
 8002b66:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8002b68:	ea45 0308 	orr.w	r3, r5, r8
 8002b6c:	6842      	ldr	r2, [r0, #4]
 8002b6e:	ea43 030e 	orr.w	r3, r3, lr
 8002b72:	ea43 030c 	orr.w	r3, r3, ip
 8002b76:	433b      	orrs	r3, r7
 8002b78:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002b7c:	4333      	orrs	r3, r6
 8002b7e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002b82:	4313      	orrs	r3, r2
 8002b84:	6043      	str	r3, [r0, #4]
 8002b86:	e7e5      	b.n	8002b54 <FMC_SDRAM_Init+0x42>

08002b88 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002b88:	68cb      	ldr	r3, [r1, #12]
 8002b8a:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8002b8e:	694b      	ldr	r3, [r1, #20]
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002b92:	680f      	ldr	r7, [r1, #0]
 8002b94:	684c      	ldr	r4, [r1, #4]
 8002b96:	688e      	ldr	r6, [r1, #8]
 8002b98:	690d      	ldr	r5, [r1, #16]
 8002b9a:	6989      	ldr	r1, [r1, #24]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	051b      	lsls	r3, r3, #20
 8002ba0:	3c01      	subs	r4, #1
 8002ba2:	3e01      	subs	r6, #1
 8002ba4:	3d01      	subs	r5, #1
 8002ba6:	3901      	subs	r1, #1
 8002ba8:	3f01      	subs	r7, #1
 8002baa:	0124      	lsls	r4, r4, #4
 8002bac:	0236      	lsls	r6, r6, #8
 8002bae:	042d      	lsls	r5, r5, #16
 8002bb0:	0609      	lsls	r1, r1, #24
 8002bb2:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8002bb6:	b95a      	cbnz	r2, 8002bd0 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002bb8:	433b      	orrs	r3, r7
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	6882      	ldr	r2, [r0, #8]
 8002bbe:	4333      	orrs	r3, r6
 8002bc0:	432b      	orrs	r3, r5
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002bcc:	2000      	movs	r0, #0
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002bd0:	6882      	ldr	r2, [r0, #8]
 8002bd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bd6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002bde:	ea44 0306 	orr.w	r3, r4, r6
 8002be2:	68c2      	ldr	r2, [r0, #12]
 8002be4:	433b      	orrs	r3, r7
 8002be6:	432b      	orrs	r3, r5
 8002be8:	430b      	orrs	r3, r1
 8002bea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60c3      	str	r3, [r0, #12]
 8002bf2:	e7eb      	b.n	8002bcc <FMC_SDRAM_Timing_Init+0x44>

08002bf4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002bfa:	6902      	ldr	r2, [r0, #16]
 8002bfc:	e9d1 3000 	ldrd	r3, r0, [r1]
 8002c00:	4303      	orrs	r3, r0
 8002c02:	68c8      	ldr	r0, [r1, #12]
 8002c04:	0d92      	lsrs	r2, r2, #22
 8002c06:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8002c0a:	0592      	lsls	r2, r2, #22
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	688a      	ldr	r2, [r1, #8]
 8002c10:	3a01      	subs	r2, #1
 8002c12:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002c16:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c18:	f7fe faf6 	bl	8001208 <HAL_GetTick>
 8002c1c:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002c1e:	69a3      	ldr	r3, [r4, #24]
 8002c20:	f013 0320 	ands.w	r3, r3, #32
 8002c24:	d101      	bne.n	8002c2a <FMC_SDRAM_SendCommand+0x36>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c26:	4618      	mov	r0, r3
 8002c28:	e003      	b.n	8002c32 <FMC_SDRAM_SendCommand+0x3e>
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	1c6b      	adds	r3, r5, #1
 8002c2c:	d0f7      	beq.n	8002c1e <FMC_SDRAM_SendCommand+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c2e:	b90d      	cbnz	r5, 8002c34 <FMC_SDRAM_SendCommand+0x40>
        return HAL_TIMEOUT;
 8002c30:	2003      	movs	r0, #3
}
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c34:	f7fe fae8 	bl	8001208 <HAL_GetTick>
 8002c38:	1b80      	subs	r0, r0, r6
 8002c3a:	42a8      	cmp	r0, r5
 8002c3c:	d9ef      	bls.n	8002c1e <FMC_SDRAM_SendCommand+0x2a>
 8002c3e:	e7f7      	b.n	8002c30 <FMC_SDRAM_SendCommand+0x3c>

08002c40 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002c40:	6943      	ldr	r3, [r0, #20]
 8002c42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c46:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8002c4a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002c4e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8002c50:	2000      	movs	r0, #0
 8002c52:	4770      	bx	lr

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c5a:	e003      	b.n	8002c64 <LoopCopyDataInit>

08002c5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c62:	3104      	adds	r1, #4

08002c64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c6c:	d3f6      	bcc.n	8002c5c <CopyDataInit>
  ldr  r2, =_sbss
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c70:	e002      	b.n	8002c78 <LoopFillZerobss>

08002c72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c74:	f842 3b04 	str.w	r3, [r2], #4

08002c78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c7c:	d3f9      	bcc.n	8002c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c7e:	f7fe fa53 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f000 f8ef 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f000 f80f 	bl	8002ca8 <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c8c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002c90:	0809cc98 	.word	0x0809cc98
  ldr  r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c98:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8002c9c:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8002ca0:	200003b0 	.word	0x200003b0

08002ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <ADC_IRQHandler>
	...

08002ca8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cac:	b096      	sub	sp, #88	; 0x58
    duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
    handled in milliseconds basis.
    - Set NVIC Group Priority to 4
    - Low Level Initialization: global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8002cae:	f7fe fa85 	bl	80011bc <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <main+0x16c>)
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	9102      	str	r1, [sp, #8]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	9302      	str	r3, [sp, #8]
 8002cc8:	9b02      	ldr	r3, [sp, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <main+0x170>)
 8002ccc:	9103      	str	r1, [sp, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cdc:	9303      	str	r3, [sp, #12]
 8002cde:	9b03      	ldr	r3, [sp, #12]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce0:	2601      	movs	r6, #1
 8002ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ce6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce8:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf0:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002cf4:	2108      	movs	r1, #8
 8002cf6:	f44f 73b4 	mov.w	r3, #360	; 0x168
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 6;
 8002cfa:	2007      	movs	r0, #7
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002cfc:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 6;
 8002d00:	2306      	movs	r3, #6
 8002d02:	e9cd 0314 	strd	r0, r3, [sp, #80]	; 0x50
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002d06:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d08:	9513      	str	r5, [sp, #76]	; 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002d0a:	f7ff fcf1 	bl	80026f0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8002d0e:	b100      	cbz	r0, 8002d12 <main+0x6a>
  {
    while(1) { ; }
 8002d10:	e7fe      	b.n	8002d10 <main+0x68>
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
 8002d12:	f7ff fa87 	bl	8002224 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 8002d16:	b100      	cbz	r0, 8002d1a <main+0x72>
  {
    while(1) { ; }
 8002d18:	e7fe      	b.n	8002d18 <main+0x70>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002d1a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d1c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d20:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002d22:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002d2a:	2105      	movs	r1, #5
 8002d2c:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002d2e:	e9cd 2307 	strd	r2, r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002d32:	f7ff fadf 	bl	80022f4 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8002d36:	b100      	cbz	r0, 8002d3a <main+0x92>
  {
    while(1) { ; }
 8002d38:	e7fe      	b.n	8002d38 <main+0x90>
  lcd_status = BSP_LCD_Init();
 8002d3a:	f7fd ffb7 	bl	8000cac <BSP_LCD_Init>
  if(condition)
 8002d3e:	4604      	mov	r4, r0
 8002d40:	b118      	cbz	r0, 8002d4a <main+0xa2>
    BSP_LED_On(LED3);
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7fd fd44 	bl	80007d0 <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8002d48:	e7fe      	b.n	8002d48 <main+0xa0>
  BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);     
 8002d4a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002d4e:	f7fd fdb7 	bl	80008c0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0); 
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fd fdea 	bl	800092c <BSP_LCD_SelectLayer>
  * @param  None
  * @retval None
  */
static void LCD_BriefDisplay(void)
{
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5c:	f7fd fe1c 	bl	8000998 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002d60:	482e      	ldr	r0, [pc, #184]	; (8002e1c <main+0x174>)
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK) 
    {
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8002d62:	4f2f      	ldr	r7, [pc, #188]	; (8002e20 <main+0x178>)
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002d64:	f7fd fdf4 	bl	8000950 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002d68:	482c      	ldr	r0, [pc, #176]	; (8002e1c <main+0x174>)
 8002d6a:	f7fd fde5 	bl	8000938 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, 800, 112);  
 8002d6e:	2370      	movs	r3, #112	; 0x70
 8002d70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d74:	4621      	mov	r1, r4
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fd fe26 	bl	80009c8 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	f7fd fdda 	bl	8000938 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"          LCD_DSI_VideoMode_SingleBuffer");
 8002d84:	4927      	ldr	r1, [pc, #156]	; (8002e24 <main+0x17c>)
    CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8002d86:	4c28      	ldr	r4, [pc, #160]	; (8002e28 <main+0x180>)
  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"          LCD_DSI_VideoMode_SingleBuffer");
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f7fe f859 	bl	8000e40 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetFont(&Font16);
 8002d8e:	4827      	ldr	r0, [pc, #156]	; (8002e2c <main+0x184>)
  hdma2d.Instance          = DMA2D; 
 8002d90:	4e27      	ldr	r6, [pc, #156]	; (8002e30 <main+0x188>)
  BSP_LCD_SetFont(&Font16);
 8002d92:	f7fd fde9 	bl	8000968 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"This example shows how to display images on LCD DSI using same buffer");
 8002d96:	4927      	ldr	r1, [pc, #156]	; (8002e34 <main+0x18c>)
 8002d98:	2004      	movs	r0, #4
 8002d9a:	f7fe f851 	bl	8000e40 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"for display and for draw     ");   
 8002d9e:	4926      	ldr	r1, [pc, #152]	; (8002e38 <main+0x190>)
 8002da0:	2005      	movs	r0, #5
 8002da2:	f7fe f84d 	bl	8000e40 <BSP_LCD_DisplayStringAtLine>
    CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8002da6:	6823      	ldr	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8002da8:	4d24      	ldr	r5, [pc, #144]	; (8002e3c <main+0x194>)
  hdma2d.Instance          = DMA2D; 
 8002daa:	6066      	str	r6, [r4, #4]
    CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	6022      	str	r2, [r4, #0]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <main+0x198>)
 8002db2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  hdma2d.Init.Mode         = DMA2D_M2M;
 8002db6:	2300      	movs	r3, #0
  hdma2d.Init.OutputOffset = 800 - xsize;     
 8002db8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  hdma2d.XferCpltCallback  = NULL;
 8002dbc:	e9c4 2304 	strd	r2, r3, [r4, #16]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002dc0:	22ff      	movs	r2, #255	; 0xff
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002dc2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002dc6:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002dc8:	63a2      	str	r2, [r4, #56]	; 0x38
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8002dca:	4628      	mov	r0, r5
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 8002dcc:	e9c4 3302 	strd	r3, r3, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8002dd0:	f7fe fb9d 	bl	800150e <HAL_DMA2D_Init>
 8002dd4:	b990      	cbnz	r0, 8002dfc <main+0x154>
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK) 
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f7fe fc5f 	bl	800169c <HAL_DMA2D_ConfigLayer>
 8002dde:	b968      	cbnz	r0, 8002dfc <main+0x154>
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8002de0:	23f0      	movs	r3, #240	; 0xf0
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	463a      	mov	r2, r7
 8002de6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dea:	4641      	mov	r1, r8
 8002dec:	4628      	mov	r0, r5
 8002dee:	f7fe fbba 	bl	8001566 <HAL_DMA2D_Start>
 8002df2:	b918      	cbnz	r0, 8002dfc <main+0x154>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8002df4:	2164      	movs	r1, #100	; 0x64
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7fe fbcf 	bl	800159a <HAL_DMA2D_PollForTransfer>
    if(ImageIndex >= 2)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	2b01      	cmp	r3, #1
      ImageIndex = 0;
 8002e00:	bf88      	it	hi
 8002e02:	2300      	movhi	r3, #0
    HAL_Delay(2000); 
 8002e04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
      ImageIndex = 0;
 8002e08:	bf88      	it	hi
 8002e0a:	6023      	strhi	r3, [r4, #0]
    HAL_Delay(2000); 
 8002e0c:	f7fe fa02 	bl	8001214 <HAL_Delay>
    CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8002e10:	e7c9      	b.n	8002da6 <main+0xfe>
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	ff0000ff 	.word	0xff0000ff
 8002e20:	c007d3c0 	.word	0xc007d3c0
 8002e24:	0809cbf9 	.word	0x0809cbf9
 8002e28:	2000036c 	.word	0x2000036c
 8002e2c:	20000044 	.word	0x20000044
 8002e30:	4002b000 	.word	0x4002b000
 8002e34:	0809cc22 	.word	0x0809cc22
 8002e38:	0809cc68 	.word	0x0809cc68
 8002e3c:	20000370 	.word	0x20000370
 8002e40:	08006be4 	.word	0x08006be4

08002e44 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002e44:	4770      	bx	lr

08002e46 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <HardFault_Handler>

08002e48 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <MemManage_Handler>

08002e4a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler>

08002e4c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler>

08002e4e <SVC_Handler>:
 8002e4e:	4770      	bx	lr

08002e50 <DebugMon_Handler>:
 8002e50:	4770      	bx	lr

08002e52 <PendSV_Handler>:
 8002e52:	4770      	bx	lr

08002e54 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002e54:	f7fe b9cc 	b.w	80011f0 <HAL_IncTick>

08002e58 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc_eval);
 8002e58:	4801      	ldr	r0, [pc, #4]	; (8002e60 <LTDC_IRQHandler+0x8>)
 8002e5a:	f7ff b934 	b.w	80020c6 <HAL_LTDC_IRQHandler>
 8002e5e:	bf00      	nop
 8002e60:	200000c0 	.word	0x200000c0

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f818 	bl	8002eac <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	0809cc90 	.word	0x0809cc90
 8002ea0:	0809cc90 	.word	0x0809cc90
 8002ea4:	0809cc90 	.word	0x0809cc90
 8002ea8:	0809cc94 	.word	0x0809cc94

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
